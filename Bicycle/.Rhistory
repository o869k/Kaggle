sample(0:1,1000,replace=TRUE)
sample(0:1,1000,replace=TRUE)/(1:n)
sample(0:1,1000,replace=TRUE)/(1:1000)
cumsum(sample(0:1,1000,replace=TRUE))/(1:1000)
plot(cumsum(sample(0:1,1000,replace=TRUE))/(1:1000))
library(UsingR)
download.packages(UsingR)
download.packages("UsingR")
download.packages(date)
download.packages("date"")
download.packages("date")
setwd("~/")
download.packages("date")
file.info(x)
file.info(
)
install.packages(c("labeling", "psych"))
download.packages("date")
?destdir
?destdir()
?file.info(x)
download.packages("date.R")
download.packages("date.R",destdir=C:\Users\user\AppData\Local\Temp\RtmporU4ma\downloaded_packages)
download.packages("date.R",destdir="C:\Users\user\AppData\Local\Temp\RtmporU4ma\downloaded_packages")
download.packages(date.R,destdir="C:\Users\user\AppData\Local\Temp\RtmporU4ma\downloaded_packages")
download.packages("date.R",destdir="C:/Users\user\AppData/Local/Temp/RtmporU4ma/downloaded_packages")
download.packages("date.R",destdir="/Users\user\AppData/Local/Temp/RtmporU4ma/downloaded_packages")
download.packages("date.R",destdir=.)
download.packages("date.R",destdir=NULL)
download.packages(date.R,destdir=NULL)
download.packages(date.R)
library("ggplot2", lib.loc="~/R/win-library/3.1")
install.packages("date")
install.packages(UsingR)
install.packages("UsingR")
data(fater.son)
library(UsingR)
data(father.son)
View(father.son)
summary(father.son)
x <- father.son$sheight
mean(x)
mean(x)+c(-1,1)*qnorm(0.975)*sd(x)/sqrt(length(x))
mean(x)+c(-1,1)*qnorm(0.95)*sd(x)/sqrt(length(x))
x <- father.son$fheight
mean(x)+c(-1,1)*qnorm(0.95)*sd(x)/sqrt(length(x))
poisson.test(10)
poisson.test(10)$conf
poisson.test(10,T = 1)$conf
poisson.test(60,T = 1)$conf
poisson.test(10,T = 60)$conf
poisson.test(10,T = 1)$conf
poisson.test(0.1,T = 1)$conf
poisson.test(6,T = 1)$conf
poisson.test(10,T = 10)$conf
poisson.test(10,T = 60)$conf
poisson.test(10,T = 6)$conf
poisson.test(10,T = 3)$conf
poisson.test(10,T = 2)$conf
poisson.test(10,T = 1)$conf
poisson.test(20,T = 1)$conf
poisson.test(5,T = 1)$conf
install.packages(ISLR)
install.packages("ISLR")
library("ggplot2", lib.loc="~/R/win-library/3.1")
library(ISLR); library(ggplot2)
data(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=F) #create 75% train set of data
trainSet <- spam[inTrain,]
testSet <- spam[-inTrain,]
trainSet <- Wage[inTrain,]
testSet <- Wage[-inTrain,]
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=F) #create 75% train set of data
library("caret") # a ML models package
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=F) #create 75% train set of data
trainSet <- Wage[inTrain,]
testSet <- Wage[-inTrain,]
featurePlot(x=trainSet[,c("age","jobclass")],y=trainSet$wage,plot="pairs") #present the wage date vs. age & jobclass
qplot(wage,color=eductaion,data=trainSet,geom="density") # a density plot of wage vs. education
qplot(wage,color=education,data=trainSet,geom="density") # a density plot of wage vs. education
library(kernlab); library("e1071"); data(spam)
library(kernlab); library("e1071"); data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list=F) #create 75% train set of data
trainSet <- spam[inTrain,]
testSet <- spam[-inTrain,]
folds1 <- createFolds(y=trainSet$type,k=10,list=TRUE,returnTrain = TRUE)#create a 10 kfold cross validation on train set for features optimization
folds2 <- createResample(y=spam$type,times=10,list=TRUE)#create a 10 kfold resampling on data with replacement
#sapply(folds1,length) #size of folds
modelFit <- train(type ~ .,data=trainSet,method="glm") #train a glm algo on data
modelFit$finalModel #best fitted model
predictions <- predict(modelFit,newdata=testSet) #run the fitted model on test data
confusionMatrix(predictions,testSet$type) #creates a hypotesis tableconfusion matrix
#Standardizing the features
preObj <- preProcess(trainSet[,-58],method==c("center","scale"))
trainSetStandart <- predict(preObj,trainSet[,-58])$capitalAAve
preObj <- preProcess(trainSet[,-58],method=c("center","scale"))
trainSetStandart <- predict(preObj,trainSet[,-58])$capitalAAve
preObj <- preProcess(trainSet[,-58],method=c("center","scale","knnImpute"))
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=F) #create 75% train set of data
trainSet <- Wage[inTrain,]
testSet <- Wage[-inTrain,]
dummies <- dummyVars(wage ~ jobclass,data=trainSet)
head(dummies)
head(dummies,newdata=trainSet)
head(predict(dummies,newdata=trainSet))
nsv <- nearZeroVar(trainSet,saveMetrics = T) #check for zero covariates
nsv
#Initialization
{
sessionInfo() #system performance
gc() #clear unsued memory
rm(list=ls()) # clear workspace
setwd("C:/Users/user/Documents/R/Bicycle")
set.seed(1234) #setting seed for comparison
library(date); library(fpp)
library(ff); library(ggplot2)
library(caret); library(kernlab)
library(e1071); library(UsingR)
library(rpart); library(rattle)
library(randomForest); library(party)
}
#Read Data & PreAllocation:
{
trainSet <- read.csv("train.csv")
N <- nrow(trainSet)  #Number of train samples
testSet <- read.csv("test.csv")
Nt <- nrow(testSet) #Number of test samples
M <- ncol(testSet)-1 #Number of features per sample
}
#Preprocess: Seperate Date & Time
{
trainSet$Time <- sapply(trainSet$datetime, FUN=function(x) {strsplit(as.character(x),split=" ")[[1]][2]})
trainSet$Time <- sapply(trainSet$Time, FUN=function(x) as.numeric({strsplit(as.character(x),split=":")[[1]][1]}))
testSet$Time <- sapply(testSet$datetime, FUN=function(x) {strsplit(as.character(x),split=" ")[[1]][2]})
testSet$Time <- sapply(testSet$Time, FUN=function(x) as.numeric({strsplit(as.character(x),split=":")[[1]][1]}))
trainSet$Month <- sapply(trainSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][2]}))
testSet$Month <- sapply(testSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][2]}))
}
View(trainSet)
#Preprocess: grouping humidity,windspeed,atemp, weather(=4)
{
trainSet$windspeed_new[which(trainSet$windspeed>20)] <- 20
testSet$windspeed_new[which(testSet$windspeed>20)] <- 20
trainSet$humidity_new[which(trainSet$humidity<30)] <- 30
testSet$humidity_new[which(testSet$humidity<30)] <- 30
trainSet$atemp_new[which(trainSet$atemp<10)] <- 10
testSet$atemp_new[which(testSet$atemp<10)] <- 10
trainSet$atemp_new[which(trainSet$atemp>35)] <- 35
testSet$atemp_new[which(testSet$atemp>35)] <- 35
trainSet$weather_new[which(trainSet$weather==4)] <- 3
testSet$weather_new[which(testSet$weather==4)] <- 3
}
View(trainSet)
#Read Data & PreAllocation:
{
trainSet <- read.csv("train.csv")
N <- nrow(trainSet)  #Number of train samples
testSet <- read.csv("test.csv")
Nt <- nrow(testSet) #Number of test samples
M <- ncol(testSet)-1 #Number of features per sample
}
#Preprocess: Seperate Date (year, month) & Time (hour)
{
trainSet$Hour <- sapply(trainSet$datetime, FUN=function(x) {strsplit(as.character(x),split=" ")[[1]][2]})
trainSet$Hour <- sapply(trainSet$Time, FUN=function(x) as.numeric({strsplit(as.character(x),split=":")[[1]][1]}))
testSet$Hour <- sapply(testSet$datetime, FUN=function(x) {strsplit(as.character(x),split=" ")[[1]][2]})
testSet$Hour <- sapply(testSet$Time, FUN=function(x) as.numeric({strsplit(as.character(x),split=":")[[1]][1]}))
trainSet$Month <- sapply(trainSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][2]}))
testSet$Month <- sapply(testSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][2]}))
trainSet$Year <- sapply(trainSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][1]}))
testSet$Year <- sapply(testSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][1]}))
}
View(trainSet)
trainSet$Hour <- sapply(trainSet$datetime, FUN=function(x) {strsplit(as.character(x),split=" ")[[1]][2]})
trainSet$Hour <- sapply(trainSet$Hour, FUN=function(x) as.numeric({strsplit(as.character(x),split=":")[[1]][1]}))
testSet$Hour <- sapply(testSet$datetime, FUN=function(x) {strsplit(as.character(x),split=" ")[[1]][2]})
testSet$Hour <- sapply(testSet$Hour, FUN=function(x) as.numeric({strsplit(as.character(x),split=":")[[1]][1]}))
trainSet$Month <- sapply(trainSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][2]}))
testSet$Month <- sapply(testSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][2]}))
trainSet$Year <- sapply(trainSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][1]}))
testSet$Year <- sapply(testSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][1]}))
View(trainSet)
str(trainSet$Hour)
trainSet$Hour <- factor(trainSet$Hour)
trainSet$Month <- factor(trainSet$Month)
trainSet$Year <- factor(trainSet$Year)
estSet$Hour <- factor(testSet$Hour)
testSet$Hour <- factor(testSet$Hour)
testSet$Month <- factor(testSet$Month)
testSet$Year <- factor(testSet$Year)
str(trainSet$Hour)
summary(trainSet)
View(testSet)
?strptime
strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")
trainSet$Weekday <- sapply(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S"), FUN=function(x) as.factor(weekdays(x))
)
trainSet$Weekday <- sapply(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S"), FUN=function(x) as.factor(weekdays(x)))
strptime(as.character(trainSet$datetime)
)
strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")
strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")[1]
weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")[1])
weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")[2])
weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")[3])
weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")[5])
weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")[50])
trainSet$datetime <- strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")
trainSet$Weekday <- sapply(trainSet$datetime, FUN=function(x) as.factor(weekdays(x)))
train$Weekday = as.factor(weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S"))
)
train$Weekday = (weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")))
#Read Data & PreAllocation:
{
trainSet <- read.csv("train.csv")
N <- nrow(trainSet)  #Number of train samples
testSet <- read.csv("test.csv")
Nt <- nrow(testSet) #Number of test samples
M <- ncol(testSet)-1 #Number of features per sample
}
trainSet$Hour <- sapply(trainSet$datetime, FUN=function(x) {strsplit(as.character(x),split=" ")[[1]][2]})
trainSet$Hour <- sapply(trainSet$Hour, FUN=function(x) as.numeric({strsplit(as.character(x),split=":")[[1]][1]}))
testSet$Hour <- sapply(testSet$datetime, FUN=function(x) {strsplit(as.character(x),split=" ")[[1]][2]})
testSet$Hour <- sapply(testSet$Hour, FUN=function(x) as.numeric({strsplit(as.character(x),split=":")[[1]][1]}))
trainSet$Month <- sapply(trainSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][2]}))
testSet$Month <- sapply(testSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][2]}))
trainSet$Year <- sapply(trainSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][1]}))
testSet$Year <- sapply(testSet$datetime, FUN=function(x) as.numeric({strsplit(as.character(x),split="-")[[1]][1]}))
train$Weekday = (weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")))
strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")
weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S"))
train$Weekday = weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S"))
train$Weekday <- vector(length = N)
trainSet$Weekday = weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S"))
View(trainSet)
trainSet$Weekday = factor(weekdays(strptime(as.character(trainSet$datetime), format="%Y-%m-%d %H:%M:%S")))
str(trainSet$Weekday)
trainSet$Hour <- sapply(trainSet$Hour, FUN=function(x) factor(as.numeric({strsplit(as.character(x),split=":")[[1]][1]})))
trainSet$Hour <- sapply(trainSet$datetime, FUN=function(x) {strsplit(as.character(x),split=" ")[[1]][2]})
trainSet$Hour <- sapply(trainSet$Hour, FUN=function(x) factor(as.numeric({strsplit(as.character(x),split=":")[[1]][1]})))
testSet$Hour <- sapply(testSet$datetime, FUN=function(x) {strsplit(as.character(x),split=" ")[[1]][2]})
testSet$Hour <- sapply(testSet$Hour, FUN=function(x) factor(as.numeric({strsplit(as.character(x),split=":")[[1]][1]})))
trainSet$Month <- sapply(trainSet$datetime, FUN=function(x) factor(as.numeric({strsplit(as.character(x),split="-")[[1]][2]})))
testSet$Month <- sapply(testSet$datetime, FUN=function(x) factor(as.numeric({strsplit(as.character(x),split="-")[[1]][2]})))
trainSet$Year <- sapply(trainSet$datetime, FUN=function(x) factor(as.numeric({strsplit(as.character(x),split="-")[[1]][1]})))
testSet$Year <- sapply(testSet$datetime, FUN=function(x) factor(as.numeric({strsplit(as.character(x),split="-")[[1]][1]})))
str(testSet$Year)
View(trainSet)
plot(trainSet$Weekday,trainSet$count)
plot(trainSet$Weekday,trainSet$casual)
plot(trainSet$Weekday,trainSet$registered)
str(trainSet$Year)
str(trainSet$Year==1)
str(trainSet$Year==2
)
str(trainSet$Year==0)
trainSet$count[trainSet$Year==2011]
sum(trainSet$count[trainSet$Year==2011])
sum(trainSet$count[trainSet$Year==2012])
sum(trainSet$registered[trainSet$Year==2012])
sum(trainSet$registered[trainSet$Year==2011])
sum(trainSet$casual[trainSet$Year==2011])
sum(trainSet$casual[trainSet$Year==2012])
sum((trainSet$casual[trainSet$Year==2012])[trainSet$Month==1])
table(trainSet$Year,trainSet$Month)
table(trainSet$Year,trainSet$Month,tranSet$count)
table(trainSet$Year,trainSet$Month,trainSet$count)
table(trainSet$count,trainSet$Year,trainSet$Month)
table(trainSet$Year,trainSet$Month)
table(trainSet$Year,trainSet$Month,sum(trainSet$count))
str(trainSet)
trainSet$season <- factor(trainSet$season); testSet$season <- factor(testSet$season)
trainSet$holiday <- factor(trainSet$holiday); testSet$holiday <- factor(testSet$holiday)
trainSet$workingday <- factor(trainSet$workingday); testSet$workingday <- factor(testSet$workingday)
trainSet$weather <- factor(trainSet$weather); testSet$weather <- factor(testSet$weather)
str(trainSet)
str(testSet)
testSet$Weekday = factor(weekdays(strptime(as.character(testSet$datetime), format="%Y-%m-%d %H:%M:%S")))
str(testSet)
#Create a K-folds cross validation
{
K = 10 #number of folds
folds <- createFolds(trainSet$season,K)
sapply(folds,length) #size of folds
}
#Create a K-folds cross validation
{
K = 4 #number of folds
folds <- createFolds(trainSet$season,K)
sapply(folds,length) #size of folds
}
?varImpPlot
folds[[i]]
i <- 1
folds[[i]]
length(folds[[i]])
?gbm
#Random Forest - option I
{
Err <- matrix(data = 0,nrow = K,ncol = 20)
for (i in 1:K)
{
for (j in 1:20)
{
ModelCasual <- cforest(casual ~ season + holiday + workingday + weather + temp + atemp + humidity + windspeed + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], controls=cforest_unbiased(ntree=j*100, mtry=3))
EvalCas <- predict(ModelCasual,trainSet[folds[[i]],],OOB=TRUE,type = "response")
varImpPlot(ModelCasual)
ModelReg <- cforest(registered ~ season + holiday + workingday + weather + temp + atemp + humidity + windspeed + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], controls=cforest_unbiased(ntree=j*100, mtry=3))
EvalReg <- predict(ModelReg,trainSet[folds[[i]],],OOB=TRUE,type = "response")
varImpPlot(ModelCasual)
EvalCount <- EvalCas + EvalReg
Err[i,j] <- round(sqrt(mean((log(EvalCount+1)-log(trainSet$count[folds[[i]]]))^2)),digits=3) #RMSLE
print(j)
}
print(k)
}
plot(Err/Folds,type="l")
}
varImpPlot(ModelCasual)
length(-folds[[i]])
length(folds[[i]])
length(trainSet[-folds[[i]],1])
ErrCas <- matrix(data = 0,nrow = K,ncol = 20)
ErrReg <- matrix(data = 0,nrow = K,ncol = 20)
rm(Err)
for (i in 1:K)
{
for (j in 1:20)
{
ModelCas <- randomForest(casual ~ season + holiday + workingday + weather + temp + atemp + humidity + windspeed + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
EvalCas <- predict(ModelCas,trainSet[folds[[i]],])
varImpPlot(ModelCas)
ErrCas[i,j] <- round(sqrt(mean((log(EvalCas+1)-log(trainSet$casual[folds[[i]]]))^2)),digits=3) #RMSLE
ModelReg <- randomForest(registered ~ season + holiday + workingday + weather + temp + atemp + humidity + windspeed + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
EvalReg <- predict(ModelReg,trainSet[folds[[i]],])
varImpPlot(ModelReg)
ErrReg[i,j] <- round(sqrt(mean((log(EvalReg+1)-log(trainSet$registered[folds[[i]]]))^2)),digits=3) #RMSLE
print(j)
}
print(k)
}
View(ErrReg)
View(ErrCas)
ErrCas[i,j] <- round(sqrt(mean((log(EvalCas+1)-log(trainSet$casual[folds[[i]]]+1))^2)),digits=3) #RMSLE
View(ErrCas)
EvalReg <- predict(ModelReg,trainSet[folds[[i]],])
View(ErrReg)
ErrCas2 <- matrix(data = 0,nrow = K,ncol = 20)
ErrReg2 <- matrix(data = 0,nrow = K,ncol = 20)
i <-1
j <- 1
ModelCas <- train(casual ~ season + holiday + workingday + weather + temp + atemp + humidity + windspeed + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], method="gbm", n.trees=j*100)
EvalCas <- predict(ModelCas,trainSet[folds[[i]],])
ErrCas2[i,j] <- round(sqrt(mean((log(EvalCas+1)-log(trainSet$casual[folds[[i]]]+1))^2)),digits=3) #RMSLE
gc()
ModelReg <- train(registered ~ season + holiday + workingday + weather + temp + atemp + humidity + windspeed + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], method="gbm", n.trees=j*100)
EvalReg <- predict(ModelReg,trainSet[folds[[i]],])
ErrReg2[i,j] <- round(sqrt(mean((log(EvalReg+1)-log(trainSet$registered[folds[[i]]]+1))^2)),digits=3) #RMSLE
gc()
scatterplotMatrix(trainSet[c(2:9,13:16)]
)
library(car);
scatterplotMatrix(trainSet[c(2:9,13:16)])
gc()
dev.off()
scatterplotMatrix(trainSet[c(10:12)])
cor(trainSet[c(10:12)])
skewness(trainSet[c(10:12)])
skewness(trainSet[c(10:12)])
skewness(trainSet[10])
skewness(trainSet[10,])
plot(trainSet[10,])
plot(trainSet[,10])
plot(log(trainSet[,10]))
plot(log(trainSet[,10])+1)
hist(trainSet$windspeed)
table(trainSet$weather)
table(testSet$weather)
trainSet$weather[which(trainSet$weather==4)] <- 3
testSet$weather[which(testSet$weather==4)] <- 3
trainSet$weather <- factor(trainSet$weather); testSet$weather <- factor(testSet$weather)
table(trainSet$season)
trainSet$windspeed_new <- "20+"
trainSet$windspeed_new[trainSet$windspeed<20 & trainSet$windspeed>=15] <- "15-20"
trainSet$windspeed_new[trainSet$windspeed<15 & trainSet$windspeed>=10] <- "10-15"
trainSet$windspeed_new[trainSet$windspeed<10 & trainSet$windspeed>=5] <- "5-10"
trainSet$windspeed_new[trainSet$windspeed<5] <- "5-"
hist(trainSet$windspeed_new)
trainSet$windspeed_new <- factor(trainSet$windspeed_new)
hist(trainSet$windspeed_new)
table(trainSet$windspeed_new)
View(trainSet)
trainSet$windspeed_new <- "20+"; testSet$windspeed_new <- "20+";
trainSet$windspeed_new[trainSet$windspeed<20 & trainSet$windspeed>=15] <- "15-20"; testSet$windspeed_new[testSet$windspeed<20 & testSet$windspeed>=15] <- "15-20";
trainSet$windspeed_new[trainSet$windspeed<15 & trainSet$windspeed>=10] <- "10-15"; testSet$windspeed_new[testSet$windspeed<15 & testSet$windspeed>=10] <- "10-15";
trainSet$windspeed_new[trainSet$windspeed<10 & trainSet$windspeed>=5] <- "5-10"; testSet$windspeed_new[testSet$windspeed<10 & testSet$windspeed>=5] <- "5-10";
trainSet$windspeed_new[trainSet$windspeed<5] <- "5-"; testSet$windspeed_new[testSet$windspeed<5] <- "5-";
trainSet$windspeed_new <- factor(trainSet$windspeed_new); testSet$windspeed_new <- factor(testSet$windspeed_new);
hist(trainSet$humidity)
trainSet$humidity_new <- "80+";
trainSet$humidity_new[trainSet$humidity<80 & trainSet$humidity>=60] <- "60-80";
trainSet$humidity_new[trainSet$humidity<60 & trainSet$humidity>=40] <- "40-60";
testSet$humidity_new[testSet$humidity<40] <- "40-";
table(trainSet$humidity_new)
trainSet$humidity_new <- "80+";
trainSet$humidity_new[trainSet$humidity<80 & trainSet$humidity>=60] <- "60-80";
trainSet$humidity_new[trainSet$humidity<60 & trainSet$humidity>=40] <- "40-60";
trainSet$humidity_new[trainSet$humidity<40] <- "40-";
table(trainSet$humidity_new)
trainSet$humidity_new <- "80+"; testSet$humidity_new <- "80+"
trainSet$humidity_new[trainSet$humidity<80 & trainSet$humidity>=60] <- "60-80"; testSet$humidity_new[testSet$humidity<80 & testSet$humidity>=60] <- "60-80"
trainSet$humidity_new[trainSet$humidity<60 & trainSet$humidity>=40] <- "40-60"; testSet$humidity_new[testSet$humidity<60 & testSet$humidity>=40] <- "40-60"
trainSet$humidity_new[trainSet$humidity<40] <- "40-"; testSet$humidity_new[testSet$humidity<40] <- "40-"
trainSet$humidity_new <- factor(trainSet$humidity_new); testSet$humidity_new <- factor(testSet$humidity_new);
table(trainSet$humidity_new)
table(testSet$humidity_new)
str(testSet$humidity_new)
hist(trainSet$atemp)
hist(trainSet$temp)
trainSet$atemp_new <- "30+"; testSet$atemp_new <- "30+"
trainSet$atemp_new[trainSet$atemp<30 & trainSet$atemp>=20] <- "20-30"; testSet$atemp_new[testSet$atemp<30 & testSet$atemp>=20] <- "20-30"
trainSet$atemp_new[trainSet$atemp<20 & trainSet$atemp>=10] <- "10-20"; testSet$atemp_new[testSet$atemp<20 & testSet$atemp>=10] <- "10-20"
trainSet$atemp_new[trainSet$atemp<10] <- "10-"; testSet$atemp_new[testSet$atemp<10] <- "10-"
trainSet$atemp_new <- factor(trainSet$atemp_new); testSet$atemp_new <- factor(testSet$atemp_new);
table(trainSet$atemp)
table(trainSet$atemp_new)
trainSet$temp_new <- "30+"; testSet$temp_new <- "30+"
trainSet$temp_new[trainSet$temp<30 & trainSet$temp>=20] <- "20-30"; testSet$atemp_new[testSet$temp<30 & testSet$temp>=20] <- "20-30"
trainSet$temp_new[trainSet$temp<20 & trainSet$temp>=10] <- "10-20"; testSet$atemp_new[testSet$temp<20 & testSet$temp>=10] <- "10-20"
trainSet$temp_new[trainSet$temp<10] <- "10-"; testSet$temp_new[testSet$temp<10] <- "10-"
trainSet$temp_new <- factor(trainSet$temp_new); testSet$temp_new <- factor(testSet$temp_new);
table(trainSet$temp_new)
trainSet$atemp_new <- "30+"; testSet$atemp_new <- "30+"
trainSet$atemp_new[trainSet$atemp<30 & trainSet$atemp>=25] <- "25-30"; testSet$atemp_new[testSet$atemp<30 & testSet$atemp>=25] <- "25-30"
trainSet$atemp_new[trainSet$atemp<25 & trainSet$atemp>=20] <- "20-25"; testSet$atemp_new[testSet$atemp<25 & testSet$atemp>=20] <- "20-25"
trainSet$atemp_new[trainSet$atemp<20 & trainSet$atemp>=15] <- "15-20"; testSet$atemp_new[testSet$atemp<20 & testSet$atemp>=15] <- "15-20"
trainSet$atemp_new[trainSet$atemp<15 & trainSet$atemp>=10] <- "10-15"; testSet$atemp_new[testSet$atemp<15 & testSet$atemp>=10] <- "10-15"
trainSet$atemp_new[trainSet$atemp<10] <- "10-"; testSet$atemp_new[testSet$atemp<10] <- "10-"
trainSet$atemp_new <- factor(trainSet$atemp_new); testSet$atemp_new <- factor(testSet$atemp_new);
trainSet$temp_new <- "30+"; testSet$temp_new <- "30+"
trainSet$temp_new[trainSet$temp<30 & trainSet$temp>=25] <- "25-30"; testSet$temp_new[testSet$temp<30 & testSet$temp>=25] <- "25-30"
trainSet$temp_new[trainSet$temp<25 & trainSet$temp>=20] <- "20-25"; testSet$temp_new[testSet$temp<25 & testSet$temp>=20] <- "20-25"
trainSet$temp_new[trainSet$temp<20 & trainSet$temp>=15] <- "15-20"; testSet$temp_new[testSet$temp<20 & testSet$temp>=15] <- "15-20"
trainSet$temp_new[trainSet$temp<15 & trainSet$temp>=10] <- "10-15"; testSet$temp_new[testSet$temp<15 & testSet$temp>=10] <- "10-15"
trainSet$temp_new[trainSet$temp<10] <- "10-"; testSet$temp_new[testSet$temp<10] <- "10-"
trainSet$temp_new <- factor(trainSet$temp_new); testSet$temp_new <- factor(testSet$temp_new);
table(trainSet$temp_new)
table(trainSet$atemp_new)
table(testSet$atemp_new)
table(testSet$temp_new)
str(trainSet)
ErrCas <- matrix(data = 0,nrow = K,ncol = 20)
ErrReg <- matrix(data = 0,nrow = K,ncol = 20)
ErrCas2 <- matrix(data = 0,nrow = K,ncol = 20)
ErrReg2 <- matrix(data = 0,nrow = K,ncol = 20)
i <- 1
j < -10
j <- 10
ModelCas <- randomForest(casual ~ season + holiday + workingday + weather + temp + atemp + humidity + windspeed + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
ModelCas <- randomForest(casual ~ season + holiday + workingday + weather + temp_new + atemp_new + humidity_new + windspeed_new + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
EvalCas <- predict(ModelCas,trainSet[folds[[i]],])
varImpPlot(ModelCas); gc()
ErrCas[i,j] <- round(sqrt(mean((log(EvalCas+1)-log(trainSet$casual[folds[[i]]]+1))^2)),digits=3) #RMSLE
ModelReg <- randomForest(registered ~ season + holiday + workingday + weather + temp_new + atemp_new + humidity_new + windspeed_new + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
EvalReg <- predict(ModelReg,trainSet[folds[[i]],])
varImpPlot(ModelReg); gc()
ErrReg[i,j] <- round(sqrt(mean((log(EvalReg+1)-log(trainSet$registered[folds[[i]]]+1))^2)),digits=3) #RMSLE
print(j)
gc()
rm(EvalCas,EvalReg,ModelCasual,train)
ModelCas <- randomForest(casual ~ season + holiday + workingday + weather + temp_new + atemp_new + humidity_new + windspeed_new + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
EvalCas <- predict(ModelCas,trainSet[folds[[i]],])
varImpPlot(ModelCas); gc()
ErrCas[i,j] <- round(sqrt(mean((log(EvalCas+1)-log(trainSet$casual[folds[[i]]]+1))^2)),digits=3) #RMSLE
ModelReg <- randomForest(registered ~ season + holiday + workingday + weather + temp_new + atemp_new + humidity_new + windspeed_new + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
EvalReg <- predict(ModelReg,trainSet[folds[[i]],])
varImpPlot(ModelReg); gc()
ErrReg[i,j] <- round(sqrt(mean((log(EvalReg+1)-log(trainSet$registered[folds[[i]]]+1))^2)),digits=3) #RMSLE
print(j)
View(trainSet)
View(testSet)
gc()
ModelCas <- randomForest(casual ~ season + holiday + workingday + weather + temp_new + atemp_new + humidity_new + windspeed_new + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
gc()
ModelCas <- train(casual ~ season + holiday + workingday + weather + temp_new + atemp_new + humidity_new + windspeed_new+ Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], method="gbm", n.trees=j*100)
ModelCas <- randomForest(casual ~ season + holiday + workingday + weather + temp_new + atemp_new + humidity_new + windspeed_new + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
K = 3 #number of folds
folds <- createFolds(trainSet$season,K)
sapply(folds,length) #size of folds
ModelCas <- randomForest(casual ~ season + holiday + workingday + weather + temp_new + atemp_new + humidity_new + windspeed_new + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
EvalCas <- predict(ModelCas,trainSet[folds[[i]],])
varImpPlot(ModelCas); gc()
ErrCas[i,j] <- round(sqrt(mean((log(EvalCas+1)-log(trainSet$casual[folds[[i]]]+1))^2)),digits=3) #RMSLE
ErrCas[i,j]
for (i in 1:K)
{
for (j in 1:20)
{
ModelCas <- randomForest(casual ~ season + holiday + workingday + weather + temp_new + atemp_new + humidity_new + windspeed_new + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
EvalCas <- predict(ModelCas,trainSet[folds[[i]],])
varImpPlot(ModelCas); gc()
ErrCas[i,j] <- round(sqrt(mean((log(EvalCas+1)-log(trainSet$casual[folds[[i]]]+1))^2)),digits=3) #RMSLE
ModelReg <- randomForest(registered ~ season + holiday + workingday + weather + temp_new + atemp_new + humidity_new + windspeed_new + Hour + Month + Year + Weekday, data=trainSet[-folds[[i]],], importance=TRUE, ntree=j*100)
EvalReg <- predict(ModelReg,trainSet[folds[[i]],])
varImpPlot(ModelReg); gc()
ErrReg[i,j] <- round(sqrt(mean((log(EvalReg+1)-log(trainSet$registered[folds[[i]]]+1))^2)),digits=3) #RMSLE
print(j)
}
print(k)
}
View(ErrCas)
View(ErrReg)
