Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Arrive_time
Job_Start_time
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Time + Elfs$Duration[1]*60
View(Elfs)
Elfs <- data.frame(ElfId=seq(1:E),Rate=rep(1,E),Busy=rep(0,E),ToyId=rep(0,E),Start=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),Duration=rep(0,E),End=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"))
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
View(Elfs)
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
Job_End_time
Elfs$End[1] - Job_End_time
Elfs$Duration[1]
(Job_End_time - Elfs$End[1])
Job_Start_time - (Job_End_time - Elfs$End[1])
10 - (Job_End_time - Elfs$End[1])
n <- as.integer(10 - (Job_End_time - Elfs$End[1]))
n
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
n
Elfs$End[1] - Job_End_time
?Heaviside
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
Elfs <- data.frame(ElfId=seq(1:E),Rate=rep(1,E),Busy=rep(0,E),ToyId=rep(0,E),Start=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),Duration=rep(0,E),End=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),NextRate=rep(1,E))
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
View(Elfs)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m
View(Elfs)
sort(Elfs)
Elfs[order(Busy)]
Elfs[order(Busy),]
order(Elfs$Busy)
Elfs[order(Elfs$Busy),]
Elfs <- Elfs[order(Elfs$Busy),]
View(Elfs)
i <- 2
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
Arrive_time
Job_Start_time
Job_End_time
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
head(Elfs)
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m
Elfs <- Elfs[order(Elfs$Busy),]
head(Elfs)
Elfs[Elfs$Busy==1,]
Elfs$End[Elfs$Busy==1,]
Elfs[Elfs$Busy==1,]$End
Elfs[Elfs$Busy==1,]
which(Elfs$Busy==1)
Elfs[which(Elfs$Busy==1),8)
Elfs[which(Elfs$Busy==1),8]
Elfs[which(Elfs$Busy==1),7]
i <- 3
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
Arrive_time
which(Elfs$Busy==1 && Elfs$End<Arrive_time)
which((Elfs$Busy==1) && (Elfs$End < Arrive_time))
idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
idx > 0
#Checking for the ones which finished the job
idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
if (idx > 0)
{
Elfs$Rate[idx] <- Elfs$NextRate[idx]
Elfs$Busy[idx] <- 0
Elfs$ToyId[idx] <- 0
Elfs$[idx] <- 0
}
if (length(idx) > 0)
{
Elfs$Rate[idx] <- Elfs$NextRate[idx]
Elfs$Busy[idx] <- 0
Elfs$ToyId[idx] <- 0
Elfs$[idx] <- 0
}
length(idx)
idx
length(idx) > 0)
(length(idx) > 0)
if (length(idx) > 0)
{
Elfs$Rate[idx] <- Elfs$NextRate[idx]
Elfs$Busy[idx] <- 0
Elfs$ToyId[idx] <- 0
Elfs$[idx] <- 0
}
if (length(idx) > 0)
{
Elfs$Rate[idx] <- Elfs$NextRate[idx]
Elfs$Busy[idx] <- 0
Elfs$ToyId[idx] <- 0
}
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
#Checking for the ones which finished the job
idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
Arrive_time
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m #calculating next rate
Elfs <- Elfs[order(Elfs$Busy),] #sort the elfs by who is free and by current rate
i <- 4
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
Arrive_time
#Checking for the ones which finished the job
idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
if (length(idx) > 0)
{
Elfs$Rate[idx] <- Elfs$NextRate[idx]
Elfs$Busy[idx] <- 0
Elfs$ToyId[idx] <- 0
}
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m #calculating next rate
Elfs <- Elfs[order(Elfs$Busy),] #sort the elfs by who is free and by current rate
i <- 5
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
Arrive_time
#Checking for the ones which finished the job
idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
if (length(idx) > 0)
{
Elfs$Rate[idx] <- Elfs$NextRate[idx]
Elfs$Busy[idx] <- 0
Elfs$ToyId[idx] <- 0
}
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m #calculating next rate
Elfs <- Elfs[order(Elfs$Busy),] #sort the elfs by who is free and by current rate
View(Elfs)
i <- 6
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
Arrive_time
#Allocating
{
for (i in 1:10)
{
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
#Checking for the ones which finished the job
idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
if (length(idx) > 0)
{
Elfs$Rate[idx] <- Elfs$NextRate[idx]
Elfs$Busy[idx] <- 0
Elfs$ToyId[idx] <- 0
}
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m #calculating next rate
Elfs <- Elfs[order(Elfs$Busy),] #sort the elfs by who is free and by current rate
}
}
View(Elfs)
#Allocating
{
for (i in 1:100)
{
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
#Checking for the ones which finished the job
idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
if (length(idx) > 0)
{
Elfs$Rate[idx] <- Elfs$NextRate[idx]
Elfs$Busy[idx] <- 0
Elfs$ToyId[idx] <- 0
}
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m #calculating next rate
Elfs <- Elfs[order(Elfs$Busy),] #sort the elfs by who is free and by current rate
}
}
View(Elfs)
#Initialize the elfs - keep this data frame sorted by the rate factor at all times
{
E <- 900 #Number of elves
Elfs <- data.frame(ElfId=seq(1:E),Rate=rep(1,E),Busy=rep(0,E),ToyId=rep(0,E),Start=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),Duration=rep(0,E),End=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),NextRate=rep(1,E),row.names = F)
}
#Allocating
{
for (i in 1:100)
{
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
#Checking for the ones which finished the job
idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
if (length(idx) > 0)
{
Elfs$Rate[idx] <- Elfs$NextRate[idx]
Elfs$Busy[idx] <- 0
Elfs$ToyId[idx] <- 0
}
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m #calculating next rate
Elfs <- Elfs[order(Elfs$Busy),] #sort the elfs by who is free and by current rate
}
}
View(Elfs)
#Initialize the elfs - keep this data frame sorted by the rate factor at all times
{
E <- 900 #Number of elves
Elfs <- data.frame(ElfId=seq(1:E),Rate=rep(1,E),Busy=rep(0,E),ToyId=rep(0,E),Start=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),Duration=rep(0,E),End=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),NextRate=rep(1,E),row.names = F)
}
View(Elfs)
View(Elfs)
Elfs <- data.frame(ElfId=seq(1:E),Rate=rep(1,E),Busy=rep(0,E),ToyId=rep(0,E),Start=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),Duration=rep(0,E),End=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),NextRate=rep(1,E),row.names = NULL)
View(Elfs)
#Allocating
{
for (i in 1:100)
{
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
#     #Checking for the ones which finished the job
#     idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
#     if (length(idx) > 0)
#     {
#       Elfs$Rate[idx] <- Elfs$NextRate[idx]
#       Elfs$Busy[idx] <- 0
#       Elfs$ToyId[idx] <- 0
#     }
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
Elfs$Start[1] <- Job_Start_time
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m #calculating next rate
Elfs <- Elfs[order(Elfs$Busy),] #sort the elfs by who is free and by current rate
}
}
View(Elfs)
Arrive_time
#Initialize the elfs - keep this data frame sorted by the rate factor at all times
{
E <- 900 #Number of elves
Elfs <- data.frame(ElfId=seq(1:E),Rate=rep(1,E),Busy=rep(0,E),ToyId=rep(0,E),Start=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),Duration=rep(0,E),End=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),NextRate=rep(1,E),row.names = NULL)
}
#Allocating
{
for (i in 1:100)
{
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
#     #Checking for the ones which finished the job
#     idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
#     if (length(idx) > 0)
#     {
#       Elfs$Rate[idx] <- Elfs$NextRate[idx]
#       Elfs$Busy[idx] <- 0
#       Elfs$ToyId[idx] <- 0
#     }
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
if Arrive_time < Job_Start_time {Elfs$Start[1] <- Job_Start_time}
else {Elfs$Start[1] <- Arrive_time}
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m #calculating next rate
Elfs <- Elfs[order(Elfs$Busy),] #sort the elfs by who is free and by current rate
}
}
if (Arrive_time < Job_Start_time) {Elfs$Start[1] <- Job_Start_time}
else {Elfs$Start[1] <- Arrive_time}
if (Arrive_time < Job_Start_time)
{
Elfs$Start[1] <- Job_Start_time
}
else
{
Elfs$Start[1] <- Arrive_time
}
if (Arrive_time < Job_Start_time)
{
Elfs$Start[1] <- Job_Start_time
} else
{
Elfs$Start[1] <- Arrive_time
}
if (Arrive_time < Job_Start_time) {Elfs$Start[1] <- Job_Start_time} else
{Elfs$Start[1] <- Arrive_time}
#Initialize the elfs - keep this data frame sorted by the rate factor at all times
{
E <- 900 #Number of elves
Elfs <- data.frame(ElfId=seq(1:E),Rate=rep(1,E),Busy=rep(0,E),ToyId=rep(0,E),Start=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),Duration=rep(0,E),End=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),NextRate=rep(1,E),row.names = NULL)
}
#Allocating
{
for (i in 1:100)
{
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
#     #Checking for the ones which finished the job
#     idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
#     if (length(idx) > 0)
#     {
#       Elfs$Rate[idx] <- Elfs$NextRate[idx]
#       Elfs$Busy[idx] <- 0
#       Elfs$ToyId[idx] <- 0
#     }
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
if (Arrive_time < Job_Start_time) {Elfs$Start[1] <- Job_Start_time} else {Elfs$Start[1] <- Arrive_time}
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m #calculating next rate
Elfs <- Elfs[order(Elfs$Busy),] #sort the elfs by who is free and by current rate
}
}
View(Elfs)
#Initialize the elfs - keep this data frame sorted by the rate factor at all times
{
E <- 900 #Number of elves
Elfs <- data.frame(ElfId=seq(1:E),Rate=rep(1,E),Busy=rep(0,E),ToyId=rep(0,E),Start=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),Duration=rep(0,E),End=as.POSIXct("2014-01-01 09:00:00",tz = "UTC"),NextRate=rep(1,E),row.names = NULL)
}
#Allocating
{
for (i in 1:1000)
{
Y <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][1]})
M <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][2]})
D <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][3]})
H <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][4]})
min <- as.numeric({strsplit(as.character(Toys$Arrival_time[i]),split=" ")[[1]][5]})
Arrive_time <- ISOdatetime(year = Y,month = M,day = D,hour = H,min = min,sec = 0,tz = "UTC")
Job_Start_time <- ISOdatetime(year = Y,month = M,day = D,hour = 9,min = 0,sec = 0,tz = "UTC")
Job_End_time <- ISOdatetime(year = Y,month = M,day = D,hour = 19,min = 0,sec = 0,tz = "UTC")
#     #Checking for the ones which finished the job
#     idx <- which((Elfs$Busy==1) && (Elfs$End < Arrive_time)) #indexes
#     if (length(idx) > 0)
#     {
#       Elfs$Rate[idx] <- Elfs$NextRate[idx]
#       Elfs$Busy[idx] <- 0
#       Elfs$ToyId[idx] <- 0
#     }
Elfs$Busy[1] <- 1
Elfs$ToyId[1] <- Toys$ToyId[i]
if (Arrive_time < Job_Start_time) {Elfs$Start[1] <- Job_Start_time} else {Elfs$Start[1] <- Arrive_time}
Elfs$Duration[1] <- Toys$Duration[i]/Elfs$Rate[1] #duration in minutes
Elfs$End[1] <- Elfs$Start[1] + Elfs$Duration[1]*60
n <- as.double(10 - (Job_End_time - Elfs$End[1]))
m <- as.double(Elfs$End[1] - Job_End_time)
if (m < 0) {m <- 0}
Elfs$NextRate[1] <- Elfs$Rate[1]*1.02^n*0.9^m #calculating next rate
Elfs <- Elfs[order(Elfs$Busy),] #sort the elfs by who is free and by current rate
}
}
View(Elfs)
Arrive_time
