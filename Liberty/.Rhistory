#Extract individual criteria data
if (criteria=="All") {Individual_criteria_rows <- (1:nrow(Individual_data))
} else {Individual_criteria_rows <- which(Individual_data[,column_number]==group_criteria_values[k])}
Criteria_data_top <- Individual_data[Individual_criteria_rows,c(1,15,21,55,61,64)] #take: ID,date,results,place and BSP bets
#Initialize individual criteria statistics
num_of_races <- NULL; num_of_wins <- NULL; num_of_places <- NULL
num_of_eliminations <- NULL; wins_rate <- NULL; places_rate <- NULL
eliminations_rate <- NULL; average_rank <- NULL; Time_from_last_race <- NULL
form1 <- NULL; form2 <- NULL; form3 <- NULL; form4 <- NULL; form5 <- NULL
win_sum <- 0; win_avg <- NULL; place_sum <- 0; place_avg <- NULL
for (j in 1:nrow(Criteria_data_top))
{
Criteria_data <- Criteria_data_top[c(1:j),]
#extarct statistics of that individual for that criteria up until this point
num_of_races <- rbind(num_of_races,(nrow(Criteria_data)-1))
num_of_wins <- rbind(num_of_wins,length(which(head(Criteria_data$Result,-1)==1)))
num_of_places <- rbind(num_of_places,sum(head(Criteria_data$Place,-1)))
num_of_eliminations <- rbind(num_of_eliminations,length(which(head(Criteria_data$Result==0,-1))))
wins_rate <- rbind(wins_rate,num_of_wins[j]/num_of_races[j]*100)
places_rate <- rbind(places_rate,num_of_places[j]/num_of_races[j]*100)
eliminations_rate <- rbind(eliminations_rate,num_of_eliminations[j]/num_of_races[j]*100)
average_rank <- rbind(average_rank,sum(head(Criteria_data$Result,-1))/(num_of_races[j]-num_of_eliminations[j])) #not including eliminations
if (is.nan(wins_rate)) {wins_rate <- 0}
if (is.nan(places_rate)) {places_rate <- 0}
if (is.nan(eliminations_rate)) {eliminations_rate <- 0}
if (is.nan(average_rank)) {average_rank <- 0}
time_difference <- as.integer(as.Date(as.character(Criteria_data$Race.Date[nrow(Criteria_data)]),format="%d/%m/%Y") - as.Date(as.character(Criteria_data$Race.Date[nrow(Criteria_data)-1]),format="%d/%m/%Y"))
if (length(time_difference) > 0) {Time_from_last_race <- rbind(Time_from_last_race,time_difference)
} else {Time_from_last_race <- rbind(Time_from_last_race,NA)}
if (nrow(Criteria_data)>1){form1 <- rbind(form1,Criteria_data$Result[nrow(Criteria_data)-1])
} else {form1 <- rbind(form1,NA)}
if (nrow(Criteria_data)>2){form2 <- rbind(form2,Criteria_data$Result[nrow(Criteria_data)-2])
} else {form2 <- rbind(form2,NA)}
if (nrow(Criteria_data)>3){form3 <- rbind(form3,Criteria_data$Result[nrow(Criteria_data)-3])
} else {form3 <- rbind(form3,NA)}
if (nrow(Criteria_data)>4){form4 <- rbind(form4,Criteria_data$Result[nrow(Criteria_data)-4])
} else {form4 <- rbind(form4,NA)}
if (nrow(Criteria_data)>5){form5 <- rbind(form5,Criteria_data$Result[nrow(Criteria_data)-5])
} else {form5 <- rbind(form5,NA)}
if (is.na(head(tail(Criteria_data$BSP_WIN_Result,2),1))) {win_sum <- rbind(win_sum,win_sum[j-1]+win_avg[j-1]) #if bet is NA just add the prev avg
} else {win_sum <- rbind(win_sum,win_sum[j-1]+head(tail(Criteria_data$BSP_WIN_Result,2),1))}
win_avg <- rbind(win_avg,win_sum[j]/num_of_races[j])
if (is.na(head(tail(Criteria_data$BSP_PLACE_Result,2),1))) {place_sum <- rbind(place_sum,place_sum[j-1]+place_avg[j-1]) #if bet is NA just add the prev avg
} else {place_sum <- rbind(place_sum,place_sum[j-1]+head(tail(Criteria_data$BSP_PLACE_Result,2),1))}
place_avg <- rbind(place_avg,place_sum[j]/num_of_races[j])
if (is.nan(win_sum)) {win_sum <- 0}
if (is.nan(win_avg)) {win_avg <- 0}
if (is.nan(place_sum)) {place_sum <- 0}
if (is.nan(place_avg)) {place_avg <- 0}
Race.ID <- Criteria_data$Race.ID
}
individual_statistics <- cbind(Race.ID,Individual_criteria_rows,num_of_races,num_of_wins,num_of_places,num_of_eliminations,wins_rate,places_rate,eliminations_rate,average_rank,Time_from_last_race,form1,form2,form3,form4,form5,win_sum,win_avg,place_sum,place_avg)
header_individual_statistics <- c("Race.ID","rows","num_of_races","num_of_wins","num_of_places","num_of_eliminations","wins_rate","places_rate","eliminations_rate","average_rank","Time_from_last_race","form1","form2","form3","form4","form5","win_sum","win_avg","place_sum","place_avg")
if (length(group)==33334) {colnames(individual_statistics) <- sapply(header_individual_statistics,function(x) {paste("Horse",criteria,x,sep = "_")})}
if (length(group)==1669) {colnames(individual_statistics) <- sapply(header_individual_statistics,function(x) {paste("Jockey",criteria,x,sep = "_")})}
if (length(group)==1872) {colnames(individual_statistics) <- sapply(header_individual_statistics,function(x) {paste("Trainer",criteria,x,sep = "_")})}
statistics <- rbind(statistics,individual_statistics)
}
if (length(Individual_rows)==1) {statistics <- cbind(Individual_rows,t(statistics[order(statistics[,1]),]))
} else {statistics <- cbind(Individual_rows,statistics[order(statistics[,2]),])}
total_statistics <- rbind(total_statistics,statistics)
}
total_statistics <- total_statistics[order(total_statistics[,1]),]
return(total_statistics[,-3])
}
Horses <- unique(RAW$Horse)
Jockeys <- unique(RAW$Jockey)
Trainers <- unique(RAW$Trainer)
#A function that uses the statistics of each data and produces the same statistics
#but normalized inside the specific race for comperisson
Comapre_Statistics <- function(Statistics)
{
races_ID <- unique(Statistics[,2])
#normalize each race statistics in order to comapre one obkjet to the rest
for (i in races_ID)
{
cat("Compare statistics; Race: ",i, "\n")
race_rows <- which(Statistics[,2]==races_ID[i])
race_statistics <- Statistics[race_rows,]
for (j in c(c(3:11,17:20),c(23:31,37:40),c(43:51,57:60)))
{
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
race_statistics[is.na(race_statistics[,j]),j] <- 0
}
Statistics[race_rows,] <- race_statistics #bring back the comperable statistics
}
return(Statistics[,-c(21,22,41,42)]) #return and remove the rows and race.ID repeats
}
tmp <- Comapre_Statistics(read.csv("C:/Users/user/Documents/R/Horses/focusratings/Statistics/Runners_catg_statistics.csv",header = T))
Statistics <- read.csv("C:/Users/user/Documents/R/Horses/focusratings/Statistics/Runners_catg_statistics.csv",header = T)
View(Statistics)
races_ID <- unique(Statistics[,2])
TMP_RACE <- 23967
i <- 23967
cat("Compare statistics; Race: ",i, "\n")
race_rows <- which(Statistics[,2]==races_ID[i])
races_ID[i]
race_statistics <- Statistics[race_rows,]
for (j in c(c(3:11,17:20),c(23:31,37:40),c(43:51,57:60)))
{
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
race_statistics[is.na(race_statistics[,j]),j] <- 0
}
race_rows <- which(Statistics[,2]==race)
race <- i
cat("Compare statistics; Race: ",race, "\n")
race_rows <- which(Statistics[,2]==race)
race_rows
race_statistics <- Statistics[race_rows,]
for (j in c(c(3:11,17:20),c(23:31,37:40),c(43:51,57:60)))
{
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
race_statistics[is.na(race_statistics[,j]),j] <- 0
}
Statistics[race_rows,] <- race_statistics #bring back the comperable statistics
races_ID <- unique(Statistics[,2])
#normalize each race statistics in order to comapre one obkjet to the rest
for (race in races_ID)
{
cat("Compare statistics; Race: ",race, "\n")
race_rows <- which(Statistics[,2]==race)
race_statistics <- Statistics[race_rows,]
for (j in c(c(3:11,17:20),c(23:31,37:40),c(43:51,57:60)))
{
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
race_statistics[is.na(race_statistics[,j]),j] <- 0
}
Statistics[race_rows,] <- race_statistics #bring back the comperable statistics
}
View(Statistics)
summary(Statistics)
View(race_statistics)
Runners_catg_statistics <- (read.csv("C:/Users/user/Documents/R/Horses/focusratings/Statistics/Runners_catg_statistics.csv",header = T))
View(Runners_catg_statistics)
Statistics$Jockey_Runners_catg_num_of_wins[RAW$Jockey=="Ryan Moore"]
mean(Statistics$Jockey_Runners_catg_num_of_wins[RAW$Jockey=="Ryan Moore"])
mean(Statistics$Jockey_Runners_catg_num_of_places[RAW$Jockey=="Ryan Moore"])
mean(Statistics$Jockey_Runners_catg_num_of_eliminations[RAW$Jockey=="Ryan Moore"])
mean(Statistics$Jockey_Runners_catg_wins_rate[RAW$Jockey=="Ryan Moore"])
mean(Statistics$Jockey_Runners_catg_Time_from_last_race[RAW$Jockey=="Ryan Moore"])
mean(Statistics$Jockey_Runners_catg_average_rank[RAW$Jockey=="Ryan Moore"])
mean(Statistics$Jockey_Runners_catg_win_sum[RAW$Jockey=="Ryan Moore"])
mean(Statistics$Jockey_Runners_catg_win_avg[RAW$Jockey=="Ryan Moore"])
mean(Statistics$Jockey_Runners_catg_place_sum[RAW$Jockey=="Ryan Moore"])
mean(Statistics$Jockey_Runners_catg_form1[RAW$Jockey=="Ryan Moore"])
mean(Statistics$Jockey_Runners_catg_form1[RAW$Jockey=="Ryan Moore"],na.rm=T)
View(RAW)
mean(Statistics$Jockey_Runners_catg_form1[RAW$Jockey=="Paul Moloney"],na.rm=T)
mean(Statistics$Jockey_Runners_catg_win_sum[RAW$Jockey=="Paul Moloney"],na.rm=T)
mean(Statistics$Jockey_Runners_catg_num_of_wins[RAW$Jockey=="Paul Moloney"],na.rm=T)
mean(Statistics$Jockey_Runners_catg_wins_rate[RAW$Jockey=="Paul Moloney"],na.rm=T)
mean(Statistics$Jockey_Runners_catg_wins_rate[RAW$Jockey=="Michael OConnell"],na.rm=T)
mean(Statistics$Jockey_Runners_catg_num_of_wins[RAW$Jockey=="Michael OConnell"],na.rm=T)
mean(Statistics$Jockey_Runners_catg_num_of_wins[RAW$Jockey=="Phillip Makin"],na.rm=T)
mean(Statistics$Jockey_Runners_catg_num_of_wins[RAW$Jockey=="Richard Hughes"],na.rm=T)
race_rows <- which(Runners_catg_statistics[,2]==race)
race_statistics <- Runners_catg_statistics[race_rows,]
View(race_statistics)
race <- 1
race_rows <- which(Runners_catg_statistics[,2]==race)
race_statistics <- Runners_catg_statistics[race_rows,]
View(race_statistics)
j <- 16
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
race_statistics[,j]
(race_statistics[,10]==0)
race_statistics[(race_statistics[,10]==0),10]
race_statistics[(race_statistics[,10]==0),10] <- NA #avg rank = 0 -> put NA
race_statistics[(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
race_statistics[(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
View(race_statistics)
c(3:11,17:20,23:31,37:40,43:51,57:60)
is.na(race_statistics[,10])
is.na(race_statistics[,10])
race_statistics[is.na(race_statistics[,10]),10] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
View(race_statistics)
Statistics <- Runners_catg_statistics
races_ID <- unique(Statistics[,2])
#normalize each race statistics in order to comapre one obkjet to the rest
for (race in races_ID)
{
cat("Compare statistics; Race: ",race, "\n")
race_rows <- which(Runne[,2]==race)
race_statistics <- Statistics[race_rows,]
race_statistics[(race_statistics[,10]==0),10] <- NA #avg rank = 0 -> put NA
race_statistics[(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
race_statistics[(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
for (j in c(3:20,23:40,43:60))
{
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
#race_statistics[is.na(race_statistics[,j]),j] <- 0
}
race_statistics[is.na(race_statistics[,10]),10] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,11]),11] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,31]),31] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,51]),51] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[(race_statistics[,12]==0),12] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,13]==0),13] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,14]==0),14] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,15]==0),15] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,16]==0),16] <- 1 #form5 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,32]==0),32] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,33]==0),33] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,34]==0),34] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,35]==0),35] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,36]==0),36] <- 1 #form5 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,52]==0),52] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,53]==0),53] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,54]==0),54] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,55]==0),55] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,56]==0),56] <- 1 #form5 = 0 -> put 1 (lower is better)
Statistics[race_rows,] <- race_statistics #bring back the comperable statistics
}
races_ID <- unique(Statistics[,2])
#normalize each race statistics in order to comapre one obkjet to the rest
for (race in races_ID)
{
cat("Compare statistics; Race: ",race, "\n")
race_rows <- which(Statistics[,2]==race)
race_statistics <- Statistics[race_rows,]
race_statistics[(race_statistics[,10]==0),10] <- NA #avg rank = 0 -> put NA
race_statistics[(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
race_statistics[(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
for (j in c(3:20,23:40,43:60))
{
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
#race_statistics[is.na(race_statistics[,j]),j] <- 0
}
race_statistics[is.na(race_statistics[,10]),10] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,11]),11] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,31]),31] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,51]),51] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[(race_statistics[,12]==0),12] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,13]==0),13] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,14]==0),14] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,15]==0),15] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,16]==0),16] <- 1 #form5 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,32]==0),32] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,33]==0),33] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,34]==0),34] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,35]==0),35] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,36]==0),36] <- 1 #form5 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,52]==0),52] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,53]==0),53] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,54]==0),54] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,55]==0),55] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[(race_statistics[,56]==0),56] <- 1 #form5 = 0 -> put 1 (lower is better)
Statistics[race_rows,] <- race_statistics #bring back the comperable statistics
}
View(race_statistics)
race
cat("Compare statistics; Race: ",race, "\n")
race_rows <- which(Statistics[,2]==race)
race_statistics <- Statistics[race_rows,]
View(race_statistics)
race_statistics[(race_statistics[,10]==0),10] <- NA #avg rank = 0 -> put NA
race_statistics[(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
race_statistics[(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
View(race_statistics)
for (j in c(3:20,23:40,43:60))
{
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
#race_statistics[is.na(race_statistics[,j]),j] <- 0
}
View(race_statistics)
cat("Compare statistics; Race: ",race, "\n")
race_rows <- which(Statistics[,2]==race)
race_statistics <- Statistics[race_rows,]
race_statistics[(race_statistics[,10]==0),10] <- NA #avg rank = 0 -> put NA
race_statistics[(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
race_statistics[(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
for (j in c(3:20,23:40,43:60))
{
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
race_statistics[is.nan(race_statistics[,j]),j] <- 0
}
View(race_statistics)
race_statistics[is.na(race_statistics[,10]),10] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,11]),11] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,31]),31] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,51]),51] <- 1 #time last race = NA -> put 1 at the end (lower is better)
View(race_statistics)
race_statistics[(race_statistics[,12]==0),12] <- 1 #form1 = 0 -> put 1 (lower is better)
(race_statistics[,12]==0)
which(race_statistics[,12]==0)
race_statistics[which(race_statistics[,12]==0),12] <- 1 #form1 = 0 -> put 1 (lower is better)
View(race_statistics)
race_statistics[which(race_statistics[,12]==0),12] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,13]==0),13] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,14]==0),14] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,15]==0),15] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,16]==0),16] <- 1 #form5 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,32]==0),32] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,33]==0),33] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,34]==0),34] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,35]==0),35] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,36]==0),36] <- 1 #form5 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,52]==0),52] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,53]==0),53] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,54]==0),54] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,55]==0),55] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,56]==0),56] <- 1 #form5 = 0 -> put 1 (lower is better)
cat("Compare statistics; Race: ",race, "\n")
race_rows <- which(Statistics[,2]==race)
race_statistics <- Statistics[race_rows,]
race_statistics[which(race_statistics[,10]==0),10] <- NA #avg rank = 0 -> put NA
race_statistics[which(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
race_statistics[which(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
for (j in c(3:20,23:40,43:60))
{
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
race_statistics[is.nan(race_statistics[,j]),j] <- 0
}
race_statistics[is.na(race_statistics[,10]),10] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,11]),11] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,31]),31] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,51]),51] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[which(race_statistics[,12]==0),12] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,13]==0),13] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,14]==0),14] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,15]==0),15] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,16]==0),16] <- 1 #form5 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,32]==0),32] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,33]==0),33] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,34]==0),34] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,35]==0),35] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,36]==0),36] <- 1 #form5 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,52]==0),52] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,53]==0),53] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,54]==0),54] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,55]==0),55] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,56]==0),56] <- 1 #form5 = 0 -> put 1 (lower is better)
Statistics[race_rows,] <- race_statistics #bring back the comperable statistics
Statistics <- Runners_catg_statistics
races_ID <- unique(Statistics[,2])
#normalize each race statistics in order to comapre one obkjet to the rest
for (race in races_ID)
{
cat("Compare statistics; Race: ",race, "\n")
race_rows <- which(Statistics[,2]==race)
race_statistics <- Statistics[race_rows,]
race_statistics[which(race_statistics[,10]==0),10] <- NA #avg rank = 0 -> put NA
race_statistics[which(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
race_statistics[which(race_statistics[,30]==0),50] <- NA #avg rank = 0 -> put NA
for (j in c(3:20,23:40,43:60))
{
race_statistics[,j] <- race_statistics[,j]/sum(abs(race_statistics[,j]),na.rm = T)
race_statistics[is.nan(race_statistics[,j]),j] <- 0
}
race_statistics[is.na(race_statistics[,10]),10] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,30]),50] <- 1 #avg rank = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,11]),11] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,31]),31] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[is.na(race_statistics[,51]),51] <- 1 #time last race = NA -> put 1 at the end (lower is better)
race_statistics[which(race_statistics[,12]==0),12] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,13]==0),13] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,14]==0),14] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,15]==0),15] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,16]==0),16] <- 1 #form5 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,32]==0),32] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,33]==0),33] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,34]==0),34] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,35]==0),35] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,36]==0),36] <- 1 #form5 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,52]==0),52] <- 1 #form1 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,53]==0),53] <- 1 #form2 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,54]==0),54] <- 1 #form3 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,55]==0),55] <- 1 #form4 = 0 -> put 1 (lower is better)
race_statistics[which(race_statistics[,56]==0),56] <- 1 #form5 = 0 -> put 1 (lower is better)
Statistics[race_rows,] <- race_statistics #bring back the comperable statistics
}
summary(Statistics[1:60000,])
#Initialization
{
sessionInfo() #system performance
gc() #clear unsued memory
rm(list=ls()) # clear workspace
mainDir <- "C:/Users/user/Documents/R/Liberty/"
perlDir <- "C:/Strawberry/perl/bin/perl.exe"
setwd(mainDir)
Sys.setlocale("LC_TIME", "English")
set.seed(1234) #setting seed for comparison
library(randomForest); library(caret);
library(MASS);
}
#"NormalizedGini" is the other half of the metric. This function does most of the work, though
SumModelGini <- function(solution, submission) {
df = data.frame(solution = solution, submission = submission)
df <- df[order(df$submission, decreasing = TRUE),]
df
df$random = (1:nrow(df))/nrow(df)
df
totalPos <- sum(df$solution)
df$cumPosFound <- cumsum(df$solution) # this will store the cumulative number of positive examples found (used for computing "Model Lorentz")
df$Lorentz <- df$cumPosFound / totalPos # this will store the cumulative proportion of positive examples found ("Model Lorentz")
df$Gini <- df$Lorentz - df$random # will store Lorentz minus random
print(df)
return(sum(df$Gini))
}
NormalizedGini <- function(solution, submission) {
SumModelGini(solution, submission) / SumModelGini(solution, solution)
}
train <- read.csv("C:/Users/user/Documents/R/Liberty/train.csv")
train_interactions_no_correlation <- read.csv("C:/Users/user/Documents/R/Liberty/train_interactions_no_correlation_smaller.csv")
train <- cbind(Hazard=train$Hazard,train_interactions_no_correlation)
#Divide to train and eval - multifolds & other initializations
{
K <- 3 #number of folds (70-30)
Times <- 1 #number of resamples (5)
folds <- createMultiFolds(train$Hazard,k=K,times = Times)
M <- ncol(train)
N <- nrow(train)
ntrees <- c(1000) # vector of trees, it is then multiplied by number of cpus (4)
gini_OOB_ntrees <- rep(0,length(ntrees))
gini_eval_ntrees <- rep(0,length(ntrees))
}
rm(train_interactions_no_correlation)
#Training RF and calulating AUC in multi folds validation
{
for (j in 1:length(ntrees))
{
gini_OOB <- rep(0,K*Times)
gini_eval <- rep(0,K*Times)
for (i in 1:(K*Times))
{
model_RF <- randomForest(y=train$Hazard[c(folds[[i]])],x=train[c(folds[[i]]),-1],xtest =train[-c(folds[[i]]),-1],
ytest = train$Hazard[-c(folds[[i]])],ntree=ntrees[j],do.trace=T,keep.forest=T)
#Fitting results
gini_OOB[i] <- NormalizedGini(train$Hazard[c(folds[[i]])],model_RF$predicted)
gini_eval[i] <- NormalizedGini(train$Hazard[-c(folds[[i]])],model_RF$test$predicted)
#Plot err rate of train and oob
plot(1:model_RF$ntree,model_RF$test$mse,type="l",main=paste("MSE, Out-fold vs. OOB",sep=""),xlab="Number of Trees",ylab="MSE")
lines(1:model_RF$ntree,model_RF$mse,col="blue")
#Plot err rate of train and oob
plot(1:model_RF$ntree,model_RF$test$rsq,type="l",main=paste("R2, Out-fold vs. OOB",sep=""),xlab="Number of Trees",ylab="R2")
lines(1:model_RF$ntree,model_RF$rsq,col="blue")
}
gini_OOB_ntrees[j] <- mean(gini_OOB)
gini_eval_ntrees[j] <- mean(gini_eval)
}
#Plot eval and train score vs. number of trees
plot(y=gini_OOB_ntrees,ntrees,main="Gini vs. Number of Trees",col=2,lwd=2,xlab="Number of Trees",ylab="gini",type = "l")
lines(y=gini_eval_ntrees,ntrees,col=3,lwd=2)
}
gc()
ntrees <- c(500) # vector of trees, it is then multiplied by number of cpus (4)
#Training RF and calulating AUC in multi folds validation
{
for (j in 1:length(ntrees))
{
gini_OOB <- rep(0,K*Times)
gini_eval <- rep(0,K*Times)
for (i in 1:(K*Times))
{
model_RF <- randomForest(y=train$Hazard[c(folds[[i]])],x=train[c(folds[[i]]),-1],xtest =train[-c(folds[[i]]),-1],
ytest = train$Hazard[-c(folds[[i]])],ntree=ntrees[j],do.trace=T,keep.forest=T)
#Fitting results
gini_OOB[i] <- NormalizedGini(train$Hazard[c(folds[[i]])],model_RF$predicted)
gini_eval[i] <- NormalizedGini(train$Hazard[-c(folds[[i]])],model_RF$test$predicted)
#Plot err rate of train and oob
plot(1:model_RF$ntree,model_RF$test$mse,type="l",main=paste("MSE, Out-fold vs. OOB",sep=""),xlab="Number of Trees",ylab="MSE")
lines(1:model_RF$ntree,model_RF$mse,col="blue")
#Plot err rate of train and oob
plot(1:model_RF$ntree,model_RF$test$rsq,type="l",main=paste("R2, Out-fold vs. OOB",sep=""),xlab="Number of Trees",ylab="R2")
lines(1:model_RF$ntree,model_RF$rsq,col="blue")
}
gini_OOB_ntrees[j] <- mean(gini_OOB)
gini_eval_ntrees[j] <- mean(gini_eval)
}
#Plot eval and train score vs. number of trees
plot(y=gini_OOB_ntrees,ntrees,main="Gini vs. Number of Trees",col=2,lwd=2,xlab="Number of Trees",ylab="gini",type = "l")
lines(y=gini_eval_ntrees,ntrees,col=3,lwd=2)
}
ntrees <- c(100) # vector of trees, it is then multiplied by number of cpus (4)
#Training RF and calulating AUC in multi folds validation
{
for (j in 1:length(ntrees))
{
gini_OOB <- rep(0,K*Times)
gini_eval <- rep(0,K*Times)
for (i in 1:(K*Times))
{
model_RF <- randomForest(y=train$Hazard[c(folds[[i]])],x=train[c(folds[[i]]),-1],xtest =train[-c(folds[[i]]),-1],
ytest = train$Hazard[-c(folds[[i]])],ntree=ntrees[j],do.trace=T,keep.forest=T)
#Fitting results
gini_OOB[i] <- NormalizedGini(train$Hazard[c(folds[[i]])],model_RF$predicted)
gini_eval[i] <- NormalizedGini(train$Hazard[-c(folds[[i]])],model_RF$test$predicted)
#Plot err rate of train and oob
plot(1:model_RF$ntree,model_RF$test$mse,type="l",main=paste("MSE, Out-fold vs. OOB",sep=""),xlab="Number of Trees",ylab="MSE")
lines(1:model_RF$ntree,model_RF$mse,col="blue")
#Plot err rate of train and oob
plot(1:model_RF$ntree,model_RF$test$rsq,type="l",main=paste("R2, Out-fold vs. OOB",sep=""),xlab="Number of Trees",ylab="R2")
lines(1:model_RF$ntree,model_RF$rsq,col="blue")
}
gini_OOB_ntrees[j] <- mean(gini_OOB)
gini_eval_ntrees[j] <- mean(gini_eval)
}
#Plot eval and train score vs. number of trees
plot(y=gini_OOB_ntrees,ntrees,main="Gini vs. Number of Trees",col=2,lwd=2,xlab="Number of Trees",ylab="gini",type = "l")
lines(y=gini_eval_ntrees,ntrees,col=3,lwd=2)
}
