valid_kappa[k] <- classAgreement(rf_valid$test$confusion)$kappa
valid_fpr[k] <- 1-rf_valid$test$confusion[4]/(rf_valid$test$confusion[3]+rf_valid$test$confusion[4])
valid_fnr[k] <- 1-rf_valid$test$confusion[1]/(rf_valid$test$confusion[2]+rf_valid$test$confusion[1])
}
scores_rf <- as.data.frame(rbind(train_acc,train_kappa,train_fpr,train_fnr,valid_acc,valid_kappa,valid_fpr,valid_fnr))
scores_rf$mean_folds <- c(mean(train_acc),mean(train_kappa),mean(train_fpr),mean(train_fnr),mean(valid_acc),mean(valid_kappa),mean(valid_fpr),mean(valid_fnr))
scores_rf$std_folds <- c(sd(train_acc),sd(train_kappa),sd(train_fpr),sd(train_fnr),sd(valid_acc),sd(valid_kappa),sd(valid_fpr),sd(valid_fnr))
rf <- randomForest(x=trainset_new[,-c(1,2,ncol(trainset_new))],
y=trainset_new$label,
ntree=50,
do.trace=T,
importance = T,
keep.forest=T)
final_acc <- classAgreement(rf$confusion)$diag
final_kappa <- classAgreement(rf$confusion)$kappa
final_fpr <- 1-rf$confusion[4]/(rf$confusion[3]+rf$confusion[4])
final_fnr <- 1-rf$confusion[1]/(rf$confusion[2]+rf$confusion[1])
scores_rf$final <- c(final_acc,final_kappa,final_fpr,final_fnr,rep(NA,4))
varImpPlot(rf)
rf <- randomForest(x=trainset_new[,-c(1,2)],
y=trainset_new$label,
ntree=20,
do.trace=T,
importance = T,
keep.forest=T)
rf <- randomForest(x=trainset_new[,-c(1,2,ncol(trainset_new))],
y=trainset_new$label,
ntree=20,
do.trace=T,
importance = T,
keep.forest=T)
rf <- randomForest(x=trainset[,-c(1,2,ncol(trainset_new))],
y=trainset$label,
ntree=20,
do.trace=T,
importance = T,
keep.forest=T)
rf <- randomForest(x=trainset_new[,-c(1,2,ncol(trainset_new))],
y=trainset_new$label,
ntree=20,
do.trace=T,
importance = T,
keep.forest=T)
View(testset_new)
testset_new$label_predcited <- predict(rf,testset_new[,-c(1,2)])
testset_new$churn_prob <- predict(rf,testset_new[,-c(1,2)],"prob")
testset_new$churn_prob <- predict(rf,testset_new[,-c(1,2)],"prob")[,2]*100
head(trainset,5)
head(trainset,6)
head(trainset,7)
#build new train and test with removal of first 6 months from each customer - those are biased data (mostly 0)
trainset_new <- NULL
for (i in 1:length(customers))
{
customer <- trainset[trainset$end_customer==customers[i],]
customer_train <- customer[7:nrow(customer),]
trainset_new <- rbind(trainset_new,customer_train)
}
length(unique(trainset_new$end_customer))
#Create train, validation
K <- 3; folds <- createMultiFolds(trainset_new$label,k = K,times = 1)
train_acc <- rep(NA,K); train_fpr <- rep(NA,K); train_fnr <- rep(NA,K); train_kappa <- rep(NA,K)
valid_acc <- rep(NA,K); valid_fpr <- rep(NA,K); valid_fnr <- rep(NA,K); valid_kappa <- rep(NA,K)
for (k in 1:K)
{
rf_valid <- randomForest(x=trainset_new[folds[[k]],-c(1,2,ncol(trainset_new))],
y=trainset_new$label[folds[[k]]],
xtest=trainset_new[-folds[[k]],-c(1,2,ncol(trainset_new))],
ytest=trainset_new$label[-folds[[k]]],
ntree=20,
do.trace=T,
keep.forest=T)
train_acc[k] <- classAgreement(rf_valid$confusion)$diag
train_kappa[k] <- classAgreement(rf_valid$confusion)$kappa
train_fpr[k] <- 1-rf_valid$confusion[4]/(rf_valid$confusion[3]+rf_valid$confusion[4])
train_fnr[k] <- 1-rf_valid$confusion[1]/(rf_valid$confusion[2]+rf_valid$confusion[1])
valid_acc[k] <- classAgreement(rf_valid$test$confusion)$diag
valid_kappa[k] <- classAgreement(rf_valid$test$confusion)$kappa
valid_fpr[k] <- 1-rf_valid$test$confusion[4]/(rf_valid$test$confusion[3]+rf_valid$test$confusion[4])
valid_fnr[k] <- 1-rf_valid$test$confusion[1]/(rf_valid$test$confusion[2]+rf_valid$test$confusion[1])
}
scores_rf <- as.data.frame(rbind(train_acc,train_kappa,train_fpr,train_fnr,valid_acc,valid_kappa,valid_fpr,valid_fnr))
scores_rf$mean_folds <- c(mean(train_acc),mean(train_kappa),mean(train_fpr),mean(train_fnr),mean(valid_acc),mean(valid_kappa),mean(valid_fpr),mean(valid_fnr))
scores_rf$std_folds <- c(sd(train_acc),sd(train_kappa),sd(train_fpr),sd(train_fnr),sd(valid_acc),sd(valid_kappa),sd(valid_fpr),sd(valid_fnr))
rf <- randomForest(x=trainset_new[,-c(1,2,ncol(trainset_new))],
y=trainset_new$label,
ntree=20,
do.trace=T,
importance = T,
keep.forest=T)
final_acc <- classAgreement(rf$confusion)$diag
final_kappa <- classAgreement(rf$confusion)$kappa
final_fpr <- 1-rf$confusion[4]/(rf$confusion[3]+rf$confusion[4])
final_fnr <- 1-rf$confusion[1]/(rf$confusion[2]+rf$confusion[1])
scores_rf$final <- c(final_acc,final_kappa,final_fpr,final_fnr,rep(NA,4))
varImpPlot(rf)
trainset <- trainset_new
trainset_new <- NULL
testset_new <- NULL
for (i in 1:length(customers))
{
customer <- trainset[trainset$end_customer==customers[i],]
label <- customer$label
customer_train <- customer[-c((nrow(customer)-2):nrow(customer)),]
customer_test <- customer[c((nrow(customer)-2):nrow(customer)),]
customer_train$label <- label[4:length(label)]
customer_test$label <- NULL
trainset_new <- rbind(trainset_new,customer_train)
testset_new <- rbind(testset_new,customer_test)
}
#Create train, validation
K <- 3; folds <- createMultiFolds(trainset_new$label,k = K,times = 1)
train_acc <- rep(NA,K); train_fpr <- rep(NA,K); train_fnr <- rep(NA,K); train_kappa <- rep(NA,K)
valid_acc <- rep(NA,K); valid_fpr <- rep(NA,K); valid_fnr <- rep(NA,K); valid_kappa <- rep(NA,K)
for (k in 1:K)
{
rf_valid <- randomForest(x=trainset_new[folds[[k]],-c(1,2,ncol(trainset_new))],
y=trainset_new$label[folds[[k]]],
xtest=trainset_new[-folds[[k]],-c(1,2,ncol(trainset_new))],
ytest=trainset_new$label[-folds[[k]]],
ntree=20,
do.trace=T,
keep.forest=T)
train_acc[k] <- classAgreement(rf_valid$confusion)$diag
train_kappa[k] <- classAgreement(rf_valid$confusion)$kappa
train_fpr[k] <- 1-rf_valid$confusion[4]/(rf_valid$confusion[3]+rf_valid$confusion[4])
train_fnr[k] <- 1-rf_valid$confusion[1]/(rf_valid$confusion[2]+rf_valid$confusion[1])
valid_acc[k] <- classAgreement(rf_valid$test$confusion)$diag
valid_kappa[k] <- classAgreement(rf_valid$test$confusion)$kappa
valid_fpr[k] <- 1-rf_valid$test$confusion[4]/(rf_valid$test$confusion[3]+rf_valid$test$confusion[4])
valid_fnr[k] <- 1-rf_valid$test$confusion[1]/(rf_valid$test$confusion[2]+rf_valid$test$confusion[1])
}
scores_rf <- as.data.frame(rbind(train_acc,train_kappa,train_fpr,train_fnr,valid_acc,valid_kappa,valid_fpr,valid_fnr))
scores_rf$mean_folds <- c(mean(train_acc),mean(train_kappa),mean(train_fpr),mean(train_fnr),mean(valid_acc),mean(valid_kappa),mean(valid_fpr),mean(valid_fnr))
scores_rf$std_folds <- c(sd(train_acc),sd(train_kappa),sd(train_fpr),sd(train_fnr),sd(valid_acc),sd(valid_kappa),sd(valid_fpr),sd(valid_fnr))
rf <- randomForest(x=trainset_new[,-c(1,2,ncol(trainset_new))],
y=trainset_new$label,
ntree=20,
do.trace=T,
importance = T,
keep.forest=T)
final_acc <- classAgreement(rf$confusion)$diag
final_kappa <- classAgreement(rf$confusion)$kappa
final_fpr <- 1-rf$confusion[4]/(rf$confusion[3]+rf$confusion[4])
final_fnr <- 1-rf$confusion[1]/(rf$confusion[2]+rf$confusion[1])
scores_rf$final <- c(final_acc,final_kappa,final_fpr,final_fnr,rep(NA,4))
varImpPlot(rf)
testset_new$label_predcited <- predict(rf,testset_new[,-c(1,2)])
testset_new$churn_prob <- predict(rf,testset_new[,-c(1,2)],"prob")[,2]*100
View(trainset)
testset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\testset_new.csv")
testset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\testset.csv")
str(testset)
str(rainset)
str(trainset)
trainset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\trainset_new.csv")
testset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\testset.csv")
trainset$month_year <- as.Date(as.character(trainset$month_year))
testset$month_year <- as.Date(as.character(testset$month_year))
trainset$dominant_state_month <- factor(trainset$dominant_state_month,levels=levels(testset$dominant_state_month))
trainset$label <- factor(trainset$label)
customers <- unique(as.character(trainset$end_customer))
customers_test <- unique(as.character(testset$end_customer))
str(trainset)
#Initialization
{
sessionInfo() #system performance
gc() #clear unsued memory
rm(list=ls()) # clear workspace
mainDir <- "D:/Data/rossman"
setwd(mainDir)
Sys.setlocale("LC_TIME", "English")
set.seed(1234) #setting seed for comparison
library(caret); library(randomForest)
library(lubridate); library(reshape2)
library(foreach); library(doParallel)
library(fpp); library(UsingR)
library(kernlab); library(e1071)
library(Hmisc); library(devtools)
library(xgboost); library(quantmod)
library(zoo); library(weatherData)
library(FSelector); library(ggplot2)
}
#Read IoTM data
trainset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\trainset_new.csv")
testset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\testset.csv")
trainset$month_year <- as.Date(as.character(trainset$month_year))
testset$month_year <- as.Date(as.character(testset$month_year))
trainset$dominant_state_month <- factor(trainset$dominant_state_month,levels=levels(testset$dominant_state_month))
trainset$label <- factor(trainset$label)
customers <- unique(as.character(trainset$end_customer))
customers_test <- unique(as.character(testset$end_customer))
trainset_new <- NULL
for (i in 1:length(customers))
{
customer <- trainset[trainset$end_customer==customers[i],]
customer_train <- customer[7:nrow(customer),]
trainset_new <- rbind(trainset_new,customer_train)
}
trainset <- trainset_new
testset_new <- NULL
for (i in 1:length(customers_test))
{
customers_test <- testset[testset$end_customer==customers_test[i],]
customer_test <- customers_test[7:nrow(customers_test),]
testset_new <- rbind(testset_new,customer_test)
}
customers_test <- testset[testset$end_customer==customers_test[i],]
customers_test[i]
customers_test
customers_test <- unique(as.character(testset$end_customer))
testset_new <- NULL
for (i in 1:length(customers_test))
{
customer <- testset[testset$end_customer==customers_test[i],]
customer_test <- customer[7:nrow(customer),]
testset_new <- rbind(testset_new,customer_test)
}
i <- 1
customer <- testset[testset$end_customer==customers_test[i],]
customer_test <- customer[7:nrow(customer),]
testset_new <- NULL
testset_new <- rbind(testset_new,customer_test)
i <- 21
customer <- testset[testset$end_customer==customers_test[i],]
customer_test <- customer[7:nrow(customer),]
testset_new <- rbind(testset_new,customer_test)
#Read IoTM data
trainset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\trainset_new.csv")
testset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\testset.csv")
trainset$month_year <- as.Date(as.character(trainset$month_year))
testset$month_year <- as.Date(as.character(testset$month_year))
trainset$dominant_state_month <- factor(trainset$dominant_state_month,levels=levels(testset$dominant_state_month))
trainset$label <- factor(trainset$label)
customers <- unique(as.character(trainset$end_customer))
customers_test <- unique(as.character(testset$end_customer))
##### USE RF classifier for prediction for 3 months time if still churn / not churn ####
#build new train and test with removal of first 6 months from each customer - those are biased data (mostly 0)
trainset_new <- NULL
for (i in 1:length(customers))
{
cat(i,"\n")
customer <- trainset[trainset$end_customer==customers[i],]
customer_train <- customer[7:nrow(customer),]
trainset_new <- rbind(trainset_new,customer_train)
}
trainset <- trainset_new
testset_new <- NULL
for (i in 1:length(customers_test))
{
cat(i,"\n")
customer <- testset[testset$end_customer==customers_test[i],]
customer_test <- customer[7:nrow(customer),]
testset_new <- rbind(testset_new,customer_test)
}
testset <- testset_new
#build new train and test with lagged label for 3 months
trainset_new <- NULL
testset_new <- NULL
for (i in 1:length(customers))
{
customer <- trainset[trainset$end_customer==customers[i],]
label <- customer$label
customer_train <- customer[-c((nrow(customer)-2):nrow(customer)),]
customer_test <- customer[c((nrow(customer)-2):nrow(customer)),]
customer_train$label <- label[4:length(label)]
customer_test$label <- NULL
trainset_new <- rbind(trainset_new,customer_train)
testset_new <- rbind(testset_new,customer_test)
}
testset_new <- rbind(testset_new,testset)
str(testset_new)
names(testset)
testset[,-c(28:33)] <- NULL
View(testset)
View(testset)
testset[,c(28:33)] <- NULL
testset <- testset[,0c(28:33)]
testset <- testset[,-c(28:33)]
testset_new <- rbind(testset_new,testset)
#Read IoTM data
trainset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\trainset_new.csv")
testset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\testset.csv")
trainset$month_year <- as.Date(as.character(trainset$month_year))
testset$month_year <- as.Date(as.character(testset$month_year))
trainset$dominant_state_month <- factor(trainset$dominant_state_month,levels=levels(testset$dominant_state_month))
trainset$label <- factor(trainset$label)
customers <- unique(as.character(trainset$end_customer))
customers_test <- unique(as.character(testset$end_customer))
##### USE RF classifier for prediction for 3 months time if still churn / not churn ####
#build new train and test with removal of first 6 months from each customer - those are biased data (mostly 0)
trainset_new <- NULL
for (i in 1:length(customers))
{
cat(i,"\n")
customer <- trainset[trainset$end_customer==customers[i],]
customer_train <- customer[7:nrow(customer),]
trainset_new <- rbind(trainset_new,customer_train)
}
trainset <- trainset_new
testset_new <- NULL
for (i in 1:length(customers_test))
{
cat(i,"\n")
customer <- testset[testset$end_customer==customers_test[i],]
customer_test <- customer[7:nrow(customer),]
testset_new <- rbind(testset_new,customer_test)
}
testset <- testset_new
testset <- testset[,-c(28:33)]
#build new train and test with lagged label for 3 months
trainset_new <- NULL
testset_new <- NULL
for (i in 1:length(customers))
{
customer <- trainset[trainset$end_customer==customers[i],]
label <- customer$label
customer_train <- customer[-c((nrow(customer)-2):nrow(customer)),]
customer_test <- customer[c((nrow(customer)-2):nrow(customer)),]
customer_train$label <- label[4:length(label)]
customer_test$label <- NULL
trainset_new <- rbind(trainset_new,customer_train)
testset_new <- rbind(testset_new,customer_test)
}
testset_new <- rbind(testset_new,testset)
summary(testset_new)
summary(trainset)
trainset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\trainset_new.csv")
testset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\testset.csv")
trainset$month_year <- as.Date(as.character(trainset$month_year))
testset$month_year <- as.Date(as.character(testset$month_year))
trainset$dominant_state_month <- factor(trainset$dominant_state_month,levels=levels(testset$dominant_state_month))
trainset$label <- factor(trainset$label)
customers <- unique(as.character(trainset$end_customer))
customers_test <- unique(as.character(testset$end_customer))
summary(testset_new)
summary(testset)
trainset_new <- NULL
for (i in 1:length(customers))
{
cat(i,"\n")
customer <- trainset[trainset$end_customer==customers[i],]
customer_train <- customer[7:nrow(customer),]
trainset_new <- rbind(trainset_new,customer_train)
}
trainset <- trainset_new
testset <- testset[,-c(28:33)]
summary(testset)
testset_new <- NULL
for (i in 1:length(customers_test))
{
cat(i,"\n")
customer <- testset[testset$end_customer==customers_test[i],]
customer_test <- customer[7:nrow(customer),]
testset_new <- rbind(testset_new,customer_test)
}
testset[is.na(testset)] <- NULL
testset <- testset_new
testset <- testset[,-c(28:33)]
#build new train and test with lagged label for 3 months
trainset_new <- NULL
testset_new <- NULL
for (i in 1:length(customers))
{
customer <- trainset[trainset$end_customer==customers[i],]
label <- customer$label
customer_train <- customer[-c((nrow(customer)-2):nrow(customer)),]
customer_test <- customer[c((nrow(customer)-2):nrow(customer)),]
customer_train$label <- label[4:length(label)]
customer_test$label <- NULL
trainset_new <- rbind(trainset_new,customer_train)
testset_new <- rbind(testset_new,customer_test)
}
testset_new <- rbind(testset_new,testset)
summary(testset)
#Read IoTM data
trainset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\trainset_new.csv")
testset <- read.csv("C:\\IoTM\\Churn\\churn_30_12\\testset.csv")
trainset$month_year <- as.Date(as.character(trainset$month_year))
testset$month_year <- as.Date(as.character(testset$month_year))
trainset$dominant_state_month <- factor(trainset$dominant_state_month,levels=levels(testset$dominant_state_month))
trainset$label <- factor(trainset$label)
customers <- unique(as.character(trainset$end_customer))
customers_test <- unique(as.character(testset$end_customer))
##### USE RF classifier for prediction for 3 months time if still churn / not churn ####
#build new train and test with removal of first 6 months from each customer - those are biased data (mostly 0)
trainset_new <- NULL
for (i in 1:length(customers))
{
cat(i,"\n")
customer <- trainset[trainset$end_customer==customers[i],]
customer_train <- customer[7:nrow(customer),]
trainset_new <- rbind(trainset_new,customer_train)
}
trainset <- trainset_new
testset_new <- NULL
for (i in 1:length(customers_test))
{
cat(i,"\n")
customer <- testset[testset$end_customer==customers_test[i],]
customer_test <- customer[7:nrow(customer),]
testset_new <- rbind(testset_new,customer_test)
}
testset[is.na(testset)] <- NULL
testset <- testset_new
testset <- testset[,-c(28:33)]
summary(testset)
testset[is.na(testset)] <- NULL
testset[which(is.na(testset$end_customer)),] <- NULL
testset <- testset[-which(is.na(testset$end_customer)),]
summary(testset)
#build new train and test with lagged label for 3 months
trainset_new <- NULL
testset_new <- NULL
for (i in 1:length(customers))
{
customer <- trainset[trainset$end_customer==customers[i],]
label <- customer$label
customer_train <- customer[-c((nrow(customer)-2):nrow(customer)),]
customer_test <- customer[c((nrow(customer)-2):nrow(customer)),]
customer_train$label <- label[4:length(label)]
customer_test$label <- NULL
trainset_new <- rbind(trainset_new,customer_train)
testset_new <- rbind(testset_new,customer_test)
}
testset_new <- rbind(testset_new,testset)
#predict for the lagged labeled for 3 months
#Create train, validation
K <- 3; folds <- createMultiFolds(trainset_new$label,k = K,times = 1)
train_acc <- rep(NA,K); train_fpr <- rep(NA,K); train_fnr <- rep(NA,K); train_kappa <- rep(NA,K)
valid_acc <- rep(NA,K); valid_fpr <- rep(NA,K); valid_fnr <- rep(NA,K); valid_kappa <- rep(NA,K)
for (k in 1:K)
{
rf_valid <- randomForest(x=trainset_new[folds[[k]],-c(1,2,ncol(trainset_new))],
y=trainset_new$label[folds[[k]]],
xtest=trainset_new[-folds[[k]],-c(1,2,ncol(trainset_new))],
ytest=trainset_new$label[-folds[[k]]],
ntree=20,
do.trace=T,
keep.forest=T)
train_acc[k] <- classAgreement(rf_valid$confusion)$diag
train_kappa[k] <- classAgreement(rf_valid$confusion)$kappa
train_fpr[k] <- 1-rf_valid$confusion[4]/(rf_valid$confusion[3]+rf_valid$confusion[4])
train_fnr[k] <- 1-rf_valid$confusion[1]/(rf_valid$confusion[2]+rf_valid$confusion[1])
valid_acc[k] <- classAgreement(rf_valid$test$confusion)$diag
valid_kappa[k] <- classAgreement(rf_valid$test$confusion)$kappa
valid_fpr[k] <- 1-rf_valid$test$confusion[4]/(rf_valid$test$confusion[3]+rf_valid$test$confusion[4])
valid_fnr[k] <- 1-rf_valid$test$confusion[1]/(rf_valid$test$confusion[2]+rf_valid$test$confusion[1])
}
scores_rf <- as.data.frame(rbind(train_acc,train_kappa,train_fpr,train_fnr,valid_acc,valid_kappa,valid_fpr,valid_fnr))
scores_rf$mean_folds <- c(mean(train_acc),mean(train_kappa),mean(train_fpr),mean(train_fnr),mean(valid_acc),mean(valid_kappa),mean(valid_fpr),mean(valid_fnr))
scores_rf$std_folds <- c(sd(train_acc),sd(train_kappa),sd(train_fpr),sd(train_fnr),sd(valid_acc),sd(valid_kappa),sd(valid_fpr),sd(valid_fnr))
rf <- randomForest(x=trainset_new[,-c(1,2,ncol(trainset_new))],
y=trainset_new$label,
ntree=20,
do.trace=T,
importance = T,
keep.forest=T)
final_acc <- classAgreement(rf$confusion)$diag
final_kappa <- classAgreement(rf$confusion)$kappa
final_fpr <- 1-rf$confusion[4]/(rf$confusion[3]+rf$confusion[4])
final_fnr <- 1-rf$confusion[1]/(rf$confusion[2]+rf$confusion[1])
scores_rf$final <- c(final_acc,final_kappa,final_fpr,final_fnr,rep(NA,4))
varImpPlot(rf)
testset_new$label_predcited <- predict(rf,testset_new[,-c(1,2)])
testset_new$churn_prob <- predict(rf,testset_new[,-c(1,2)],"prob")[,2]*100
View(scores_rf)
View(testset_new)
View(trainset_new)
names(testset_new)
names(testset)
#predict for the current month labeled
#Create train, validation
K <- 3; folds <- createMultiFolds(trainset$label,k = K,times = 1)
train_acc <- rep(NA,K); train_fpr <- rep(NA,K); train_fnr <- rep(NA,K); train_kappa <- rep(NA,K)
valid_acc <- rep(NA,K); valid_fpr <- rep(NA,K); valid_fnr <- rep(NA,K); valid_kappa <- rep(NA,K)
for (k in 1:K)
{
rf_valid <- randomForest(x=trainset[folds[[k]],-c(1,2,ncol(trainset))],
y=trainset$label[folds[[k]]],
xtest=trainset[-folds[[k]],-c(1,2,ncol(trainset))],
ytest=trainset$label[-folds[[k]]],
ntree=20,
do.trace=T,
keep.forest=T)
train_acc[k] <- classAgreement(rf_valid$confusion)$diag
train_kappa[k] <- classAgreement(rf_valid$confusion)$kappa
train_fpr[k] <- 1-rf_valid$confusion[4]/(rf_valid$confusion[3]+rf_valid$confusion[4])
train_fnr[k] <- 1-rf_valid$confusion[1]/(rf_valid$confusion[2]+rf_valid$confusion[1])
valid_acc[k] <- classAgreement(rf_valid$test$confusion)$diag
valid_kappa[k] <- classAgreement(rf_valid$test$confusion)$kappa
valid_fpr[k] <- 1-rf_valid$test$confusion[4]/(rf_valid$test$confusion[3]+rf_valid$test$confusion[4])
valid_fnr[k] <- 1-rf_valid$test$confusion[1]/(rf_valid$test$confusion[2]+rf_valid$test$confusion[1])
}
scores_rf <- as.data.frame(rbind(train_acc,train_kappa,train_fpr,train_fnr,valid_acc,valid_kappa,valid_fpr,valid_fnr))
scores_rf$mean_folds <- c(mean(train_acc),mean(train_kappa),mean(train_fpr),mean(train_fnr),mean(valid_acc),mean(valid_kappa),mean(valid_fpr),mean(valid_fnr))
scores_rf$std_folds <- c(sd(train_acc),sd(train_kappa),sd(train_fpr),sd(train_fnr),sd(valid_acc),sd(valid_kappa),sd(valid_fpr),sd(valid_fnr))
rf <- randomForest(x=trainset[,-c(1,2,ncol(trainset))],
y=trainset$label,
ntree=20,
do.trace=T,
importance = T,
keep.forest=T)
final_acc <- classAgreement(rf$confusion)$diag
final_kappa <- classAgreement(rf$confusion)$kappa
final_fpr <- 1-rf$confusion[4]/(rf$confusion[3]+rf$confusion[4])
final_fnr <- 1-rf$confusion[1]/(rf$confusion[2]+rf$confusion[1])
scores_rf$final <- c(final_acc,final_kappa,final_fpr,final_fnr,rep(NA,4))
varImpPlot(rf)
testset$label_predcited <- predict(rf,testset[,-c(1,2)])
testset$churn_prob <- predict(rf,testset[,-c(1,2)],"prob")[,2]*100
View(testset)
