engine_no_oil <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Engine-running-without-oil-1-F1.mp3")
engine_no_oil <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Engine-running-without-oil-1-F1.mp3")
engine_no_oil@left
engine_no_oil@stereo
engine_no_oil <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Engine-running-without-oil-1-F1.mp3")
engine_no_oil2 <- audioSample(engine_no_oil@left, engine_no_oil@samp.rate, engine_no_oil@bit)
audio::play(engine_no_oil2)
Fs <- engine_no_oil@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
spg <- specgram(engine_no_oil@left, fftn, Fs, window, window-step)
S <- abs(spg$S[2:(fftn*2000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
engine <- readWave("D:/Data/Soniclue/242740__marlonhj__engine.wav")
Fs <- engine@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
spg <- specgram(engine@left, fftn, Fs, window, window-step)
S <- abs(spg$S[2:(fftn*2000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
audio::play(engine_no_oil2)
#Spectogram of engine failure
engine_no_oil <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Engine-running-without-oil-1-F1.mp3")
engine_no_oil2 <- audioSample(engine_no_oil@left, engine_no_oil@samp.rate, engine_no_oil@bit)
# audio::play(engine_no_oil2)
Fs <- engine_no_oil@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
spg <- specgram(engine_no_oil@left, fftn, Fs, window, window-step)
S <- abs(spg$S[2:(fftn*2000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
fftn
fftn
engine <- readWave("D:/Data/Soniclue/242740__marlonhj__engine.wav")
Fs <- engine@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
spg <- specgram(engine@left, fftn, Fs, window, window-step)
Fs
step
window
fftn
spg
Fs
step
window
engine_no_oil <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Engine-running-without-oil-1-F1.mp3")
Fs
Fs <- engine_no_oil@samp.rate #sampling rate
Fs
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
step
window <- trunc(60*Fs/1000)          # 20 ms data window
window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
fftn
specgram(engine_no_oil@left, fftn, Fs, window, window-step)
audio::play(engine) #play
stop()
stop(audio::play(engine))
library(signal)
require(tuneR);
require(Rtts);
require(audio);
require(e1071);
#Sepctogram of good engine
engine2 <- load.wave("D:/Data/Soniclue/242740__marlonhj__engine.wav")
audio::play(engine2) #play
engine <- readWave("D:/Data/Soniclue/242740__marlonhj__engine.wav")
Fs <- engine@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
spg <- specgram(engine@left, fftn, Fs, window, window-step)
S <- abs(spg$S[2:(fftn*2000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
#Spectogram of engine failure
engine_no_oil <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Engine-running-without-oil-1-F1.mp3")
engine_no_oil2 <- audioSample(engine_no_oil@left, engine_no_oil@samp.rate, engine_no_oil@bit)
audio::play(engine_no_oil2)
Fs <- engine_no_oil@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
spg <- specgram(engine_no_oil@left, fftn, Fs, window, window-step)
S <- abs(spg$S[2:(fftn*2000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
audio::play(engine_no_oil2)
audio::play(engine2) #play
#Sepctogram of good engine
engine2 <- load.wave("D:/Data/Soniclue/242740__marlonhj__engine.wav")
audio::play(engine2) #play
engine <- readWave("D:/Data/Soniclue/242740__marlonhj__engine.wav")
Fs <- engine@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
specgram(engine@left, fftn, Fs, window, window-step)
engine_no_oil <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Engine-running-without-oil-1-F1.mp3")
engine_no_oil2 <- audioSample(engine_no_oil@left, engine_no_oil@samp.rate, engine_no_oil@bit)
audio::play(engine_no_oil2)
Fs <- engine_no_oil@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
specgram(engine_no_oil@left, fftn, Fs, window, window-step)
engine_lifter_Adjustment <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Lifter-Adjustment-F1.mp3")
engine_lifter_Adjustment2 <- audioSample(engine_lifter_Adjustment@left, engine_lifter_Adjustment@samp.rate, engine_lifter_Adjustment@bit)
audio::play(engine_lifter_Adjustment2)
audio::play(engine_no_oil2)
Fs <- engine_lifter_Adjustment@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
spg <- specgram(engine_lifter_Adjustment@left, fftn, Fs, window, window-step)
S <- abs(spg$S[2:(fftn*2000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
specgram(engine_lifter_Adjustment@left, fftn, Fs, window, window-step)
max(S)
S
352512/44100
195840/44100
113610/48000
engine2 <- load.wave("D:/Data/Soniclue/242740__marlonhj__engine.wav")
audio::play(engine2) #play
engine <- readWave("D:/Data/Soniclue/242740__marlonhj__engine.wav")
Fs <- engine@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
fftn
window
step
Fs
engine@left <- engine@left[1:Fs*2] #sample first 2 seconds, left
engine@right <- engine@right[1:Fs*2] #sample first 2 seconds, right
engine2 <- load.wave("D:/Data/Soniclue/242740__marlonhj__engine.wav")
audio::play(engine2) #play
engine <- readWave("D:/Data/Soniclue/242740__marlonhj__engine.wav")
Fs <- engine@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
engine@left <- engine@left[1:(Fs*2)] #sample first 2 seconds, left
engine@right <- engine@right[1:(Fs*2)] #sample first 2 seconds, right
specgram(engine@left, fftn, Fs, window, window-step)
#Spectogram of engine failure - running without oil
engine_no_oil <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Engine-running-without-oil-1-F1.mp3")
engine_no_oil2 <- audioSample(engine_no_oil@left, engine_no_oil@samp.rate, engine_no_oil@bit)
audio::play(engine_no_oil2)
Fs <- engine_no_oil@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
engine_no_oil@left <- engine_no_oil@left[1:(Fs*2)] #sample first 2 seconds, left
engine_no_oil@right <- engine_no_oil@right[1:(Fs*2)] #sample first 2 seconds, right
engine_no_oil <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Engine-running-without-oil-1-F1.mp3")
engine_no_oil2 <- audioSample(engine_no_oil@left, engine_no_oil@samp.rate, engine_no_oil@bit)
Fs <- engine_no_oil@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
engine_no_oil@left <- engine_no_oil@left[1:(Fs*2)] #sample first 2 seconds, left
engine_no_oil@left
engine_no_oil@left[1:(Fs*2)]
engine_no_oil@right <- engine_no_oil@right[1:(Fs*2)] #sample first 2 seconds, right
engine_no_oil@left <- engine_no_oil@left[1:(Fs*2)] #sample first 2 seconds, left
specgram(engine_no_oil@left, fftn, Fs, window, window-step)
#Spectogram of engine failure - Lifter-Adjustment-F1
engine_lifter_Adjustment <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Lifter-Adjustment-F1.mp3")
engine_lifter_Adjustment2 <- audioSample(engine_lifter_Adjustment@left, engine_lifter_Adjustment@samp.rate, engine_lifter_Adjustment@bit)
audio::play(engine_lifter_Adjustment2)
Fs <- engine_lifter_Adjustment@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
engine_lifter_Adjustment@left <- engine_lifter_Adjustment@left[1:(Fs*2)] #sample first 2 seconds, left
engine_lifter_Adjustment@right <- engine_lifter_Adjustment@right[1:(Fs*2)] #sample first 2 seconds, right
specgram(engine_lifter_Adjustment@left, fftn, Fs, window, window-step)
(fftn*20000/Fs)
(fftn*2000/Fs)
#Spectogram of engine failure - Lifter-Adjustment-F1
engine_lifter_Adjustment <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Lifter-Adjustment-F1.mp3")
engine_lifter_Adjustment2 <- audioSample(engine_lifter_Adjustment@left, engine_lifter_Adjustment@samp.rate, engine_lifter_Adjustment@bit)
audio::play(engine_lifter_Adjustment2)
Fs <- engine_lifter_Adjustment@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
engine_lifter_Adjustment@left <- engine_lifter_Adjustment@left[1:(Fs*2)] #sample first 2 seconds, left
engine_lifter_Adjustment@right <- engine_lifter_Adjustment@right[1:(Fs*2)] #sample first 2 seconds, right
spg <- specgram(engine_lifter_Adjustment@left, fftn, Fs, window, window-step)
S <- abs(spg$S[2:(fftn*2000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
(fftn*2000/Fs)
(fftn*20000/Fs)
(fftn*15000/Fs):(fftn*20000/Fs)
(fftn*15000/Fs)
S <- abs(spg$S[(fftn*15000/Fs):(fftn*20000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
Spectogram of engine failure - running without oil
engine_no_oil <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Engine-running-without-oil-1-F1.mp3")
engine_no_oil2 <- audioSample(engine_no_oil@left, engine_no_oil@samp.rate, engine_no_oil@bit)
audio::play(engine_no_oil2)
Fs <- engine_no_oil@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
engine_no_oil@left <- engine_no_oil@left[1:(Fs*2)] #sample first 2 seconds, left
engine_no_oil@right <- engine_no_oil@right[1:(Fs*2)] #sample first 2 seconds, right
spg <- specgram(engine_no_oil@left, fftn, Fs, window, window-step)
S <- abs(spg$S[(fftn*15000/Fs):(fftn*20000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
image(t(20*log10(S)), axes = T)  #, col = gray(0:255 / 255))
image(t(20*log10(S)), axes = T,xlab="Time",yalb="Frequency")  #, col = gray(0:255 / 255))
?image
image(t(20*log10(S)),axes = T,xlab="Time",ylab="Frequency")  #, col = gray(0:255 / 255))
axis(1, at = seq(15000, 20000, by = 100))
image(t(20*log10(S)),axes = F,xlab="Time",ylab="Frequency")  #, col = gray(0:255 / 255))
axis(1, at = seq(15000, 20000, by = 100))
image(t(20*log10(S)),axes = F,xlab="Time",ylab="Frequency")  #, col = gray(0:255 / 255))
axis(1, at = seq(15000, 20000, by = 100))
# A prettier display of the volcano
x <- 10*(1:nrow(volcano))
y <- 10*(1:ncol(volcano))
image(x, y, volcano, col = terrain.colors(100), axes = FALSE)
contour(x, y, volcano, levels = seq(90, 200, by = 5),
add = TRUE, col = "peru")
axis(1, at = seq(100, 800, by = 100))
axis(2, at = seq(100, 600, by = 100))
box()
title(main = "Maunga Whau Volcano", font.main = 4)
# A prettier display of the volcano
x <- 10*(1:nrow(volcano))
y <- 10*(1:ncol(volcano))
image(x, y, volcano, col = terrain.colors(100), axes = FALSE)
axis(1, at = seq(100, 800, by = 100))
axis(2, at = seq(100, 600, by = 100))
box()
title(main = "Maunga Whau Volcano", font.main = 4)
image(t(20*log10(S)),axes = F,xlab="Time",ylab="Frequency")  #, col = gray(0:255 / 255))
axis(1, at = seq(15000, 20000, by = 1000))
axis(2, at = seq(15000, 20000, by = 1000))
box()
title(main = "Engine Failure - Lifter Adjustment Specttogram", font.main = 4)
seq(15000, 20000, by = 1000)
seq(100, 800, by = 100)
seq(100, 600, by = 100))
seq(100, 600, by = 100)
image(t(20*log10(S)),axes = F,xlab="Time",ylab="Frequency")  #, col = gray(0:255 / 255))
axis(1, at = seq(0, 2, by = 0.1))
axis(2, at = seq(15000, 20000, by = 1000))
box()
title(main = "Engine Failure - Lifter Adjustment Specttogram", font.main = 4)
seq(0, 2, by = 0.1)
image(t(20*log10(S)),axes = F,xlab="Time",ylab="Frequency")  #, col = gray(0:255 / 255))
axis(1, at = seq(0, 2, by = 0.2))
axis(2, at = seq(15000, 20000, by = 1000))
box()
title(main = "Engine Failure - Lifter Adjustment Specttogram", font.main = 4)
specgram(engine_lifter_Adjustment@left, fftn, Fs, window, window-step)
specgram(engine_lifter_Adjustment@left, fftn, Fs, window, window-step,ylim=c(15000,20000))
?specgram
plot(specgram(engine_lifter_Adjustment@left, fftn, Fs, window, window-step),ylim=c(15000,20000)))
plot(specgram(engine_lifter_Adjustment@left, fftn, Fs, window, window-step),ylim=c(15000,20000))
box()
title(main = "Engine Failure - Lifter Adjustment Specttogram", font.main = 4)
image(t(20*log10(S)), axes = F,xlab="Time",ylab="Frequency")  #, col = gray(0:255 / 255))
plot(specgram(engine_no_oil@left, fftn, Fs, window, window-step),ylim=c(15000,20000))
box()
title(main = "Engine Failure - Running Without Oil Spectogram", font.main = 4)
library(signal)
require(tuneR);
require(Rtts);
require(audio);
require(e1071);
library(caret); library(randomForest)
library(lubridate); library(reshape2)
library(foreach); library(doParallel)
library(fpp); library(UsingR)
library(kernlab); library(e1071)
library(Hmisc); library(devtools)
library(xgboost); library(quantmod)
library(zoo); library(weatherData)
library(party); library(rpart)
getSymbols("^GDAXI", from="2010-01-01", to="2015-01-11")
DAX <- as.data.frame(GDAXI); rm(GDAXI)
DAX$Date <- as.Date(row.names(DAX))
View(DAX)
plot(DAX$Date,DAX$GDAXI.Close)
plot(DAX$Date,DAX$GDAXI.Close,type="l")
engine_lifter_Adjustment <- readMP3("D:\\My Web Sites\\soniclue\\mycarmakesnoise.com\\wp-content\\uploads\\2013\\11\\Lifter-Adjustment-F1.mp3")
engine_lifter_Adjustment2 <- audioSample(engine_lifter_Adjustment@left, engine_lifter_Adjustment@samp.rate, engine_lifter_Adjustment@bit)
audio::play(engine_lifter_Adjustment2)
Fs <- 1 #sampling rate: 1/day
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
specgram(DAX$GDAXI.Close, fftn, Fs, window, window-step)
DAX$GDAXI.Close
fftn
Fs
window
Fs
trunc(60*Fs/1000)
Fs <- engine_lifter_Adjustment@samp.rate #sampling rate
step <- trunc(5*Fs)             # one spectral slice every 5 days
window <- trunc(20*Fs)          # 20 days data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
fftn
specgram(DAX$GDAXI.Close, fftn, Fs, window, window-step)
fftn
step
window
window <- trunc(20*Fs)          # 20 days data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
spg <- specgram(DAX$GDAXI.Close, fftn, Fs, window, window-step)
window <- trunc(20*Fs)          # 20 days data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
spg <- specgram(DAX$GDAXI.Close, fftn, Fs, window, window-step)
fftn
window
Fs <- 1 #sampling rate: 1/day
step <- trunc(5*Fs)             # one spectral slice every 5 days
window <- trunc(20*Fs)          # 20 days data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
Fs
step
window
fftn
fftn
Fs
60*60*24
Fs <- 1 #sampling rate: 1/86400 sec
Fs <- 1 #sampling rate: 1/86400 sec
Fs
Fs <- 1/8640 #sampling rate: 1/86400 sec
step <- trunc(5*8640*Fs)             # one spectral slice every 5 days
step
Fs
window <- trunc(20*8640*Fs)          # 20 days data window
window <- trunc(20*8640*Fs)          # 20 days data window
window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
fftn
specgram(DAX$GDAXI.Close, fftn, Fs, window, window-step)
S <- abs(spg$S[0:(fftn/Fs),])   # magnitude in range 0<f<=1Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)),axes = F,xlab="Time",ylab="Frequency")  #, col = gray(0:255 / 255))
S <- abs(spg$S[0:(fftn/Fs),])   # magnitude in range 0<f<=1Hz.
fftn/Fs)
fftn/Fs
spg$S[0:(fftn/Fs),]
spg$S
abs(spg$S[0:(fftn/Fs)])
spg$S
summary(spg$S)
summary(abs(spg$S))
Fs <- 1/8640 #sampling rate: 1/86400 sec
step <- trunc(2*8640*Fs)             # one spectral slice every 2 days
window <- trunc(5*8640*Fs)          # 5 days data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
spg <- specgram(DAX$GDAXI.Close, fftn, Fs, window, window-step)
specgram(DAX$GDAXI.Close, fftn, Fs, window, window-step)
hello <- load.wave("D:/Data/Soniclue/speechrecognitioninr/hello_ori.wav")
audio::play(hello2) #play
hello <- load.wave("D:/Data/Soniclue/speechrecognitioninr/hello_ori.wav")
hello <- readWave("D:/Data/Soniclue/speechrecognitioninr/hello_ori.wav")
Fs <- hello@samp.rate #sampling rate
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
Fs
specgram(hello@left, fftn, Fs, window, window-step)
S <- abs(spg$S[2:(fftn*2000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
S <- abs(spg$S[2:(fftn*2000/Fs),])   # magnitude in range 0<f<=2000 Hz.
hello <- readWave("D:/Data/Soniclue/speechrecognitioninr/hello_ori.wav")
Fs <- hello@samp.rate #sampling rate
Fs
step <- trunc(5*Fs/1000)             # one spectral slice every 5 ms
window <- trunc(60*Fs/1000)          # 20 ms data window
window
step
fftn <- 2^ceiling(log2(abs(window))) # next highest power of 2
fftn
spg <- specgram(hello@left, fftn, Fs, window, window-step)
window-step
S <- abs(spg$S[2:(fftn*2000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
S <- abs(spg$S[2:(fftn*20000/Fs),])   # magnitude in range 0<f<=2000 Hz.
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
fftn*20000/Fs
fftn*2000/Fs
fftn*1000/Fs
fftn*10000/Fs
S <- S/max(S)         # normalize magnitude so that max is 0 dB.
S[S < 10^(-40/10)] <- 10^(-40/10)    # clip below -40 dB.
S[S > 10^(-3/10)] <- 10^(-3/10)      # clip above -3 dB.
image(t(20*log10(S)), axes = F)  #, col = gray(0:255 / 255))
install.packages(Rfacebook)
install.packages("Rfacebook")
library("Rfacebook")
fbOAuth("1508118382834465", "c4ae80cae52b588f22a06536f1cb273c", extended_permissions = TRUE)
save(fb_oauth, file="fb_oauth")
fb_oauth <- fbOAuth("1508118382834465", "c4ae80cae52b588f22a06536f1cb273c", extended_permissions = TRUE)
fb_oauth
save(fb_oauth, file="fb_oauth")
mainDir <- "D:/Data/Liked_Predicition"
setwd(mainDir)
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
me <- getUsers("me", token=fb_oauth)
me$username
fb_oauth
?fbOAuth
sessionInfo() #system performancegc() #clear unsued memoryrm(list=ls()) # clear workspacemainDir <- "D:/Data/Liked_Predicition"setwd(mainDir)Sys.setlocale("LC_TIME", "English")set.seed(1234) #setting seed for comparisonlibrary(Rfacebook)
fb_oauth <- fbOAuth("1508118382834465", "c4ae80cae52b588f22a06536f1cb273c")
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
me <- getUsers("me", token=fb_oauth)
fb_oauth <- fbOAuth("1508118382834465", "c4ae80cae52b588f22a06536f1cb273c")
install.packages("Rook")
library(Rook)
fb_oauth <- fbOAuth("1508118382834465", "c4ae80cae52b588f22a06536f1cb273c", extended_permissions = TRUE)
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
me <- getUsers("me", token=fb_oauth)
fb_oauth <- fbOAuth("1508118382834465", "c4ae80cae52b588f22a06536f1cb273c", extended_permissions = F)
sessionInfo() #system performancegc() #clear unsued memoryrm(list=ls()) # clear workspacemainDir <- "D:/Data/Liked_Predicition"setwd(mainDir)Sys.setlocale("LC_TIME", "English")set.seed(1234) #setting seed for comparisonlibrary(Rfacebook)
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir="Rfacebook")
library(Rfacebook)
fb_oauth <- fbOAuth("1508118382834465", "c4ae80cae52b588f22a06536f1cb273c", extended_permissions = T)
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
me <- getUsers("me", token=fb_oauth)
me$username
me
my_friends <- getFriends(token, simplify = TRUE)
?getFriends
?getFriends
my_friends <- getFriends(fb_oauth, simplify = TRUE)
mat <- getNetwork(fb_oauth, format = "adj.matrix")
my_likes <- getLikes(user="me", token=fb_oauth)
my_likes
View(my_likes)
View(my_likes)
my_friends <- getFriends(fb_oauth, simplify = TRUE)
load("fb_oauth")
me <- getUsers("me", token=fb_oauth)
me$username
me$name
my_friends <- getFriends(fb_oauth, simplify = TRUE)
head(my_friends$id, n = 1) # get lowest user ID
mat <- getNetwork(fb_oauth, format = "adj.matrix")
my_likes <- getLikes(user="me", token=fb_oauth)
fb_oauth <- fbOAuth("1508118382834465", "c4ae80cae52b588f22a06536f1cb273c", extended_permissions = T)
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
me <- getUsers("me", token=fb_oauth)
me$name
my_friends <- getFriends(fb_oauth, simplify = TRUE)
fb_oauth <- fbOAuth("1508118382834465", "c4ae80cae52b588f22a06536f1cb273c", extended_permissions = T)
me
epx(1000)/(1+exp(1000))
exp(1000)/(1+exp(1000))
exp(2000)/(1+exp(2000))
exp(-2000)/(1+exp(-2000))
exp(100)/(1+exp(100))
exp(0)/(1+exp(0))
