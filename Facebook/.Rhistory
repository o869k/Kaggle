#probability for bot
for (i in 1:nrow(sampleSubmission))
{
sampleSubmission$prediction[i] <- result_test[which(test$bidder_id==as.integer(sampleSubmission$bidder_id[i])),3]
}
write.csv(sampleSubmission,"Submission_new.csv",row.names=F)
View(sampleSubmission)
## Create a set of netwok topologies
hidden_layers <- list(c(50,100,50))
epochs_layers <- c(1,4)
l1_regularizations <- c(1e-5)
input_dropout_ratios_list <- c(0.05)
hidden_dropout_ratios_list <- list(c(0.5,0.5,0.5))
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_mean_auc_h2o
eval_mean_auc_h2o
eval_Score
mean(eval_Score)
sd(eval_Score)
hidden_dropout_ratios_list <- list(c(0.1,0.1,0.1))
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_Score
eval_Score
mean(train_Score)
mean(eval_Score)
hidden_layers <- list(c(50,50))
epochs_layers <- c(1,2)
l1_regularizations <- c(1e-5)
input_dropout_ratios_list <- c(0.05)
hidden_dropout_ratios_list <- list(c(0.1,0.1,0.1))
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
hidden_dropout_ratios_list <- list(c(0.1,0.1))
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_Score
eval_Score
eval_mean_auc_h2o <- mean(eval_Score)
eval_mean_auc_h2o
train_mean_auc_h2o <- mean(train_Score)
train_mean_auc_h2o
## Create a set of netwok topologies
hidden_layers <- list(c(10))
epochs_layers <- c(1,2)
l1_regularizations <- c(1e-5)
input_dropout_ratios_list <- c(0.1)
hidden_dropout_ratios_list <- list(c(0.3,0.3))
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
hidden_dropout_ratios_list <- list(c(0.3))
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_mean_auc_h2o
eval_mean_auc_h2o
train_Score
eval_Score
## Create a set of netwok topologies
hidden_layers <- list(c(10,10,10))
epochs_layers <- c(1,10)
l1_regularizations <- c(1e-5)
input_dropout_ratios_list <- c(0.1)
hidden_dropout_ratios_list <- list(c(0.2,0.2,0.2))
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_mean_auc_h2o
eval_mean_auc_h2o
eval_Score
train_Score
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
momentum_start = 0.5,
momentum_stable = 0.99,
nesterov_accelerated_gradient = T,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
momentum_start = 0.5,
momentum_ramp = 100,
momentum_stable = 0.99,
nesterov_accelerated_gradient = T,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
momentum_start = 0.5,
momentum_ramp = 100,
momentum_stable = 0.99,
nesterov_accelerated_gradient = F,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
nesterov_accelerated_gradient = T,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_Score
eval_Score
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_mean_auc_h2o
eval_mean_auc_h2o
## Create a set of netwok topologies
hidden_layers <- list(c(50,50,50))
epochs_layers <- c(1,10)
l1_regularizations <- c(1e-5)
input_dropout_ratios_list <- c(0.1)
hidden_dropout_ratios_list <- list(c(0.2,0.2,0.2))
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
nesterov_accelerated_gradient = T,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_mean_auc_h2o
eval_mean_auc_h2o
train_Score
eval_Score
SD(train_Score)
sd(train_Score)
sd(eval_Score)
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train, key = 'train') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
nesterov_accelerated_gradient = T,
override_with_best_model = T)
result_test <- as.data.frame(h2o.predict(model@model[[2]], test_hex))
#probability for bot
for (i in 1:nrow(sampleSubmission))
{
sampleSubmission$prediction[i] <- result_test[which(test$bidder_id==as.integer(sampleSubmission$bidder_id[i])),3]
}
write.csv(sampleSubmission,"Submission_new.csv",row.names=F)
model@model[[2]]@model$train_auc
## Create a set of netwok topologies
hidden_layers <- list(c(100,100,100))
epochs_layers <- c(1,20)
l1_regularizations <- c(1e-5)
input_dropout_ratios_list <- c(0.1)
hidden_dropout_ratios_list <- list(c(0.2,0.2,0.2))
train_Score <- rep(0,K*Times)
eval_Score <- rep(0,K*Times)
for (i in 1:(K*Times))
{
## Import Data to H2O Cluster
train_hex <- as.h2o(localH2O,train[c(folds[[i]]),], key = 'train') #make train set h2o object
eval_hex <- as.h2o(localH2O,train[-c(folds[[i]]),], key = 'eval') #make train set h2o object
## Train a Deep Neural Network
#h2o.rm(localH2O, keys = c("train.hex"))
model <- h2o.deeplearning(x = 2:37,
y = 40,
data = train_hex,
validation = eval_hex,
activation = "RectifierWithDropout",
input_dropout_ratio = input_dropout_ratios_list,
hidden_dropout_ratios = hidden_dropout_ratios_list,
hidden = hidden_layers,
l1 = l1_regularizations,
epochs = epochs_layers*50,
classification = T,
balance_classes = F,
nesterov_accelerated_gradient = T,
override_with_best_model = T)
train_Score[i] <- model@model[[2]]@model$train_auc
eval_Score[i] <- model@model[[2]]@model$auc
#rm(train_hex,eval_hex,model)
#for (m in 1:20) {cat(model@model[[m]]@model$auc,"\n")}
}
train_mean_auc_h2o <- mean(train_Score)
eval_mean_auc_h2o <- mean(eval_Score)
train_mean_auc_h2o
eval_mean_auc_h2o
mean(eval_Score)
eval_Score
train_Score
Submission1 <- read.csv("Submission_new_500_h2o_deepNN_50_50_50_0.898.csv",header=T)
Submission2 <- read.csv("Submission_new1_200_trees_0.918.csv",header=T)
total_Submission <- cbind(Submission1,Submission2[,2])
View(total_Submission)
total_Submission$mean <- rowMeans(total_Submission[,c(2:3)])
total_Submission$sd <- rowSds(as.matrix(total_Submission[,c(2:3)]))
sampleSubmission[,2] <- total_Submission$mean
write.csv(sampleSubmission,"Submission_new.csv",row.names=F)
