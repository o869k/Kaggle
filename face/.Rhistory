x1 <- (x-patch_size); x2 <- (x+patch_size)
y1 <- (y-patch_size); y2 <- (y+patch_size)
if ( (!is.na(x)) && (!is.na(y)) && (x1>=1) && (x2<=R) && (y1>=1) && (y2<=R) ) {as.vector(im[x1:x2,y1:y2])}
else {NULL}
}
meanPatch <- matrix(data=colMeans(patches),nrow=P)
image(1:P,1:P,meanPatch[P:1,P:1],col=gray((0:255)/255),main=coord) #show the mean patch for that keypoint
#Defining the search coordinates in the evaluation images, optmize on the search step size, per keypoint
for (s in 1:S)
{
search_size <- s #search step size
mean_x <- round(mean(trainSet[,coord_x],na.rm=T),digits=3)
mean_y <- round(mean(trainSet[,coord_y],na.rm=T),digits=3)
x1 <- as.integer(mean_x)-search_size
x2 <- as.integer(mean_x)+search_size
y1 <- as.integer(mean_y)-search_size
y2 <- as.integer(mean_y)+search_size
params <- expand.grid(x=x1:x2,y=y1:y2)
#Evaluating by finding best coordinate to each face in eval set, place the patch on it and calculate RMSE with original data
err <- vector(mode="numeric",length=length(trainSet1IndEval))
for (k in 1:length(1))
{
im <- matrix(trainFaces[trainSet1IndEval[k],],nrow=R)
eval <- foreach(j=1:nrow(params), .combine=rbind) %dopar% {
x <- params$x[j]; y <- params$y[j] #coordinate
if (((x-patch_size)>=1) && ((x+patch_size)<=R) && ((y-patch_size)>=1) && ((y+patch_size)<=R))
{ p <- im[(x-patch_size):(x+patch_size),(y-patch_size):(y+patch_size)]
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3) }
else {score <- NA}
score <- ifelse(is.na(score),0,score)
data.frame(x,y,score)
}
bestCoor <- eval[which.max(eval$score),c("x","y")] #best coordinates with max score
err[k] <- round(sqrt(mean(c(((trainSet[trainSet1IndEval[k],coord_x]-bestCoor$x)^2),((trainSet[trainSet1IndEval[k],coord_y]-bestCoor$y)^2)),na.rm=T)),digits=3) #RMSE
}
ErrMtx[q,s] <- mean(err,na.rm=T) #fill error matrix for optimization
}
}
bestErr <- arrayInd(which.min(ErrMtx),dim(ErrMtx)) #best (min) error coordinates - to be used for that facial keypoint at the real test
Keypoints_Optimization_Table1$keypoint[m] <- coord
Keypoints_Optimization_Table1$patch_size[m] <- Q[bestErr[1]]
Keypoints_Optimization_Table1$search_size[m] <- bestErr[2]
Keypoints_Optimization_Table1$error[m] <- ErrMtx[bestErr]
rm(eval); rm(patches); rm(params)
}
View(Keypoints_Optimization_Table)
View(Keypoints_Optimization_Table1)
rm(Keypoints_Optimization_Table)
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3)
for (k in 1:length(1))
{
im <- matrix(trainFaces[trainSet1IndEval[k],],nrow=R)
eval <- foreach(j=1:nrow(params), .combine=rbind) %dopar% {
x <- params$x[j]; y <- params$y[j] #coordinate
if (((x-patch_size)>=1) && ((x+patch_size)<=R) && ((y-patch_size)>=1) && ((y+patch_size)<=R))
{ p <- im[(x-patch_size):(x+patch_size),(y-patch_size):(y+patch_size)]
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3) }
else {score <- NA}
score <- ifelse(is.na(score),0,score)
data.frame(x,y,score)
}
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3)
bestCoor
bestCoor
eval <- foreach(j=1:nrow(params), .combine=rbind) %dopar% {
x <- params$x[j]; y <- params$y[j] #coordinate
if (((x-patch_size)>=1) && ((x+patch_size)<=R) && ((y-patch_size)>=1) && ((y+patch_size)<=R))
{ p <- im[(x-patch_size):(x+patch_size),(y-patch_size):(y+patch_size)]
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3) }
else {score <- NA}
score <- ifelse(is.na(score),0,score)
data.frame(x,y,score)
}
search_size <- s #search step size
mean_x <- round(mean(trainSet[,coord_x],na.rm=T),digits=3)
mean_y <- round(mean(trainSet[,coord_y],na.rm=T),digits=3)
x1 <- as.integer(mean_x)-search_size
x2 <- as.integer(mean_x)+search_size
y1 <- as.integer(mean_y)-search_size
y2 <- as.integer(mean_y)+search_size
params <- expand.grid(x=x1:x2,y=y1:y2)
im <- matrix(trainFaces[trainSet1IndEval[k],],nrow=R)
eval <- foreach(j=1:nrow(params), .combine=rbind) %dopar% {
x <- params$x[j]; y <- params$y[j] #coordinate
if (((x-patch_size)>=1) && ((x+patch_size)<=R) && ((y-patch_size)>=1) && ((y+patch_size)<=R))
{ p <- im[(x-patch_size):(x+patch_size),(y-patch_size):(y+patch_size)]
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3) }
else {score <- NA}
score <- ifelse(is.na(score),0,score)
data.frame(x,y,score)
}
ErrMtx
gc()
mean_x <- round(mean(trainSet[c(trainSet1IndTrain),coord_x],na.rm=T),digits=3)
mean_y <- round(mean(trainSet[c(trainSet1IndTrain),coord_y],na.rm=T),digits=3)
mean_y <- round(mean(trainSet[,coord_y],na.rm=T),digits=3)
gc()
Keypoints_Optimization_Table2 <- data.frame(keypoint=rep(NA,M/2),patch_size=rep(NA,M/2),search_size=rep(NA,M/2),error=rep(NA,M/2)) #optimization table of pathces and searches per key
Q <- c(5,10,15) #Number of pixels around the keypoint for optimization
S <- 4 #number of search size patches to optimize on (1:S)
for (m in 1:(M/2))
{
#Bulding the mean patch for each keypoint
coord <- keypoints[m] #keypoint to focus on
ErrMtx <- matrix(0,nrow=length(Q),ncol=S)
for (q in 1:length(Q))
{
patch_size <- Q[q]
P <- 2*patch_size+1 #Patch length
coord_x <- paste(coord,"x",sep="_")
coord_y <- paste(coord,"y",sep="_")
patches <- foreach (i=1:length(trainSet2IndTrain), .combine=rbind) %dopar% {
im <- matrix(trainFaces[trainSet2IndTrain[i],],nrow=R)
x <- trainSet[trainSet2IndTrain[i],coord_x]
y <- trainSet[trainSet2IndTrain[i],coord_y]
x1 <- (x-patch_size); x2 <- (x+patch_size)
y1 <- (y-patch_size); y2 <- (y+patch_size)
if ( (!is.na(x)) && (!is.na(y)) && (x1>=1) && (x2<=R) && (y1>=1) && (y2<=R) ) {as.vector(im[x1:x2,y1:y2])}
else {NULL}
}
meanPatch <- matrix(data=colMeans(patches),nrow=P)
image(1:P,1:P,meanPatch[P:1,P:1],col=gray((0:255)/255),main=coord) #show the mean patch for that keypoint
#Defining the search coordinates in the evaluation images, optmize on the search step size, per keypoint
for (s in 1:S)
{
search_size <- s #search step size
mean_x <- round(mean(trainSet[c(trainSet2IndTrain),coord_x],na.rm=T),digits=3)
mean_y <- round(mean(trainSet[c(trainSet2IndTrain),coord_y],na.rm=T),digits=3)
x1 <- as.integer(mean_x)-search_size
x2 <- as.integer(mean_x)+search_size
y1 <- as.integer(mean_y)-search_size
y2 <- as.integer(mean_y)+search_size
params <- expand.grid(x=x1:x2,y=y1:y2)
#Evaluating by finding best coordinate to each face in eval set, place the patch on it and calculate RMSE with original data
err <- vector(mode="numeric",length=length(trainSet2IndEval))
for (k in 1:length(trainSet2IndEval))
{
im <- matrix(trainFaces[trainSet2IndEval[k],],nrow=R)
eval <- foreach(j=1:nrow(params), .combine=rbind) %dopar% {
x <- params$x[j]; y <- params$y[j] #coordinate
if (((x-patch_size)>=1) && ((x+patch_size)<=R) && ((y-patch_size)>=1) && ((y+patch_size)<=R))
{ p <- im[(x-patch_size):(x+patch_size),(y-patch_size):(y+patch_size)]
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3) }
else {score <- NA}
score <- ifelse(is.na(score),0,score)
data.frame(x,y,score)
}
bestCoor <- eval[which.max(eval$score),c("x","y")] #best coordinates with max score
err[k] <- round(sqrt(mean(c(((trainSet[trainSet2IndEval[k],coord_x]-bestCoor$x)^2),((trainSet[trainSet2IndEval[k],coord_y]-bestCoor$y)^2)),na.rm=T)),digits=3) #RMSE
}
ErrMtx[q,s] <- mean(err,na.rm=T) #fill error matrix for optimization
}
}
bestErr <- arrayInd(which.min(ErrMtx),dim(ErrMtx)) #best (min) error coordinates - to be used for that facial keypoint at the real test
Keypoints_Optimization_Table2$keypoint[m] <- coord
Keypoints_Optimization_Table2$patch_size[m] <- Q[bestErr[1]]
Keypoints_Optimization_Table2$search_size[m] <- bestErr[2]
Keypoints_Optimization_Table2$error[m] <- ErrMtx[bestErr]
rm(eval); rm(patches); rm(params)
}
Keypoints_Optimization_Table2 <- data.frame(keypoint=rep(NA,M/2),patch_size=rep(NA,M/2),search_size=rep(NA,M/2),error=rep(NA,M/2)) #optimization table of pathces and searches per key
Q <- c(5,10,15) #Number of pixels around the keypoint for optimization
S <- 4 #number of search size patches to optimize on (1:S)
for (m in 1:(M/2))
{
#Bulding the mean patch for each keypoint
coord <- keypoints[m] #keypoint to focus on
ErrMtx <- matrix(0,nrow=length(Q),ncol=S)
for (q in 1:length(Q))
{
patch_size <- Q[q]
P <- 2*patch_size+1 #Patch length
coord_x <- paste(coord,"x",sep="_")
coord_y <- paste(coord,"y",sep="_")
patches <- foreach (i=1:length(trainSet2IndTrain), .combine=rbind) %dopar% {
im <- matrix(trainFaces[trainSet2IndTrain[i],],nrow=R)
x <- trainSet[trainSet2IndTrain[i],coord_x]
y <- trainSet[trainSet2IndTrain[i],coord_y]
x1 <- (x-patch_size); x2 <- (x+patch_size)
y1 <- (y-patch_size); y2 <- (y+patch_size)
if ( (!is.na(x)) && (!is.na(y)) && (x1>=1) && (x2<=R) && (y1>=1) && (y2<=R) ) {as.vector(im[x1:x2,y1:y2])}
else {NULL}
}
meanPatch <- matrix(data=colMeans(patches),nrow=P)
image(1:P,1:P,meanPatch[P:1,P:1],col=gray((0:255)/255),main=coord) #show the mean patch for that keypoint
#Defining the search coordinates in the evaluation images, optmize on the search step size, per keypoint
for (s in 1:S)
{
search_size <- s #search step size
mean_x <- round(mean(trainSet[c(trainSet2IndTrain),coord_x],na.rm=T),digits=3)
mean_y <- round(mean(trainSet[c(trainSet2IndTrain),coord_y],na.rm=T),digits=3)
x1 <- as.integer(mean_x)-search_size
x2 <- as.integer(mean_x)+search_size
y1 <- as.integer(mean_y)-search_size
y2 <- as.integer(mean_y)+search_size
params <- expand.grid(x=x1:x2,y=y1:y2)
#Evaluating by finding best coordinate to each face in eval set, place the patch on it and calculate RMSE with original data
err <- vector(mode="numeric",length=length(trainSet2IndEval))
for (k in 1:length(trainSet2IndEval))
{
im <- matrix(trainFaces[trainSet2IndEval[k],],nrow=R)
eval <- foreach(j=1:nrow(params), .combine=rbind) %dopar% {
x <- params$x[j]; y <- params$y[j] #coordinate
if (((x-patch_size)>=1) && ((x+patch_size)<=R) && ((y-patch_size)>=1) && ((y+patch_size)<=R))
{ p <- im[(x-patch_size):(x+patch_size),(y-patch_size):(y+patch_size)]
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3) }
else {score <- NA}
score <- ifelse(is.na(score),0,score)
data.frame(x,y,score)
}
bestCoor <- eval[which.max(eval$score),c("x","y")] #best coordinates with max score
err[k] <- round(sqrt(mean(c(((trainSet[trainSet2IndEval[k],coord_x]-bestCoor$x)^2),((trainSet[trainSet2IndEval[k],coord_y]-bestCoor$y)^2)),na.rm=T)),digits=3) #RMSE
}
ErrMtx[q,s] <- mean(err,na.rm=T) #fill error matrix for optimization
}
}
bestErr <- arrayInd(which.min(ErrMtx),dim(ErrMtx)) #best (min) error coordinates - to be used for that facial keypoint at the real test
Keypoints_Optimization_Table2$keypoint[m] <- coord
Keypoints_Optimization_Table2$patch_size[m] <- Q[bestErr[1]]
Keypoints_Optimization_Table2$search_size[m] <- bestErr[2]
Keypoints_Optimization_Table2$error[m] <- ErrMtx[bestErr]
rm(eval); rm(patches); rm(params)
}
Keypoints_Optimization_Table2 <- data.frame(keypoint=rep(NA,M/2),patch_size=rep(NA,M/2),search_size=rep(NA,M/2),error=rep(NA,M/2)) #optimization table of pathces and searches per key
Q <- c(5,10,15) #Number of pixels around the keypoint for optimization
S <- 4 #number of search size patches to optimize on (1:S)
m <- 1
coord <- keypoints[m] #keypoint to focus on
ErrMtx <- matrix(0,nrow=length(Q),ncol=S)
q <- 1
patch_size <- Q[q]
P <- 2*patch_size+1 #Patch length
coord_x <- paste(coord,"x",sep="_")
coord_y <- paste(coord,"y",sep="_")
patches <- foreach (i=1:length(trainSet2IndTrain), .combine=rbind) %dopar% {
im <- matrix(trainFaces[trainSet2IndTrain[i],],nrow=R)
x <- trainSet[trainSet2IndTrain[i],coord_x]
y <- trainSet[trainSet2IndTrain[i],coord_y]
x1 <- (x-patch_size); x2 <- (x+patch_size)
y1 <- (y-patch_size); y2 <- (y+patch_size)
if ( (!is.na(x)) && (!is.na(y)) && (x1>=1) && (x2<=R) && (y1>=1) && (y2<=R) ) {as.vector(im[x1:x2,y1:y2])}
else {NULL}
}
gc()
?dopar
?%dopar%
registerDoParallel()
?doParallel
patches <- foreach (i=1:length(trainSet2IndTrain), .combine=rbind) %dopar% {
im <- matrix(trainFaces[trainSet2IndTrain[i],],nrow=R)
x <- trainSet[trainSet2IndTrain[i],coord_x]
y <- trainSet[trainSet2IndTrain[i],coord_y]
x1 <- (x-patch_size); x2 <- (x+patch_size)
y1 <- (y-patch_size); y2 <- (y+patch_size)
if ( (!is.na(x)) && (!is.na(y)) && (x1>=1) && (x2<=R) && (y1>=1) && (y2<=R) ) {as.vector(im[x1:x2,y1:y2])}
else {NULL}
}
meanPatch <- matrix(data=colMeans(patches),nrow=P)
image(1:P,1:P,meanPatch[P:1,P:1],col=gray((0:255)/255),main=coord) #show the mean patch for that keypoint
gc()
Keypoints_Optimization_Table2 <- data.frame(keypoint=rep(NA,M/2),patch_size=rep(NA,M/2),search_size=rep(NA,M/2),error=rep(NA,M/2)) #optimization table of pathces and searches per key
Q <- c(5,10,15) #Number of pixels around the keypoint for optimization
S <- 4 #number of search size patches to optimize on (1:S)
for (m in 1:(M/2))
{
#Bulding the mean patch for each keypoint
coord <- keypoints[m] #keypoint to focus on
ErrMtx <- matrix(0,nrow=length(Q),ncol=S)
for (q in 1:length(Q))
{
patch_size <- Q[q]
P <- 2*patch_size+1 #Patch length
coord_x <- paste(coord,"x",sep="_")
coord_y <- paste(coord,"y",sep="_")
patches <- foreach (i=1:length(trainSet2IndTrain), .combine=rbind) %dopar% {
im <- matrix(trainFaces[trainSet2IndTrain[i],],nrow=R)
x <- trainSet[trainSet2IndTrain[i],coord_x]
y <- trainSet[trainSet2IndTrain[i],coord_y]
x1 <- (x-patch_size); x2 <- (x+patch_size)
y1 <- (y-patch_size); y2 <- (y+patch_size)
if ( (!is.na(x)) && (!is.na(y)) && (x1>=1) && (x2<=R) && (y1>=1) && (y2<=R) ) {as.vector(im[x1:x2,y1:y2])}
else {NULL}
}
meanPatch <- matrix(data=colMeans(patches),nrow=P)
image(1:P,1:P,meanPatch[P:1,P:1],col=gray((0:255)/255),main=coord) #show the mean patch for that keypoint
#Defining the search coordinates in the evaluation images, optmize on the search step size, per keypoint
for (s in 1:S)
{
search_size <- s #search step size
mean_x <- round(mean(trainSet[c(trainSet2IndTrain),coord_x],na.rm=T),digits=3)
mean_y <- round(mean(trainSet[c(trainSet2IndTrain),coord_y],na.rm=T),digits=3)
x1 <- as.integer(mean_x)-search_size
x2 <- as.integer(mean_x)+search_size
y1 <- as.integer(mean_y)-search_size
y2 <- as.integer(mean_y)+search_size
params <- expand.grid(x=x1:x2,y=y1:y2)
#Evaluating by finding best coordinate to each face in eval set, place the patch on it and calculate RMSE with original data
err <- vector(mode="numeric",length=length(trainSet2IndEval))
for (k in 1:length(trainSet2IndEval))
{
im <- matrix(trainFaces[trainSet2IndEval[k],],nrow=R)
eval <- foreach(j=1:nrow(params), .combine=rbind) %dopar% {
x <- params$x[j]; y <- params$y[j] #coordinate
if (((x-patch_size)>=1) && ((x+patch_size)<=R) && ((y-patch_size)>=1) && ((y+patch_size)<=R))
{ p <- im[(x-patch_size):(x+patch_size),(y-patch_size):(y+patch_size)]
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3) }
else {score <- NA}
score <- ifelse(is.na(score),0,score)
data.frame(x,y,score)
}
bestCoor <- eval[which.max(eval$score),c("x","y")] #best coordinates with max score
err[k] <- round(sqrt(mean(c(((trainSet[trainSet2IndEval[k],coord_x]-bestCoor$x)^2),((trainSet[trainSet2IndEval[k],coord_y]-bestCoor$y)^2)),na.rm=T)),digits=3) #RMSE
}
ErrMtx[q,s] <- mean(err,na.rm=T) #fill error matrix for optimization
}
}
bestErr <- arrayInd(which.min(ErrMtx),dim(ErrMtx)) #best (min) error coordinates - to be used for that facial keypoint at the real test
Keypoints_Optimization_Table2$keypoint[m] <- coord
Keypoints_Optimization_Table2$patch_size[m] <- Q[bestErr[1]]
Keypoints_Optimization_Table2$search_size[m] <- bestErr[2]
Keypoints_Optimization_Table2$error[m] <- ErrMtx[bestErr]
rm(eval); rm(patches); rm(params)
}
gc()
Keypoints_Optimization_Table2 <- data.frame(keypoint=rep(NA,M/2),patch_size=rep(NA,M/2),search_size=rep(NA,M/2),error=rep(NA,M/2)) #optimization table of pathces and searches per key
Q <- c(5,10,15) #Number of pixels around the keypoint for optimization
S <- 4 #number of search size patches to optimize on (1:S)
for (m in 1:(M/2))
{
#Bulding the mean patch for each keypoint
coord <- keypoints[m] #keypoint to focus on
ErrMtx <- matrix(0,nrow=length(Q),ncol=S)
for (q in 1:length(Q))
{
patch_size <- Q[q]
P <- 2*patch_size+1 #Patch length
coord_x <- paste(coord,"x",sep="_")
coord_y <- paste(coord,"y",sep="_")
patches <- foreach (i=1:length(trainSet2IndTrain), .combine=rbind) %dopar% {
im <- matrix(trainFaces[trainSet2IndTrain[i],],nrow=R)
x <- trainSet[trainSet2IndTrain[i],coord_x]
y <- trainSet[trainSet2IndTrain[i],coord_y]
x1 <- (x-patch_size); x2 <- (x+patch_size)
y1 <- (y-patch_size); y2 <- (y+patch_size)
if ( (!is.na(x)) && (!is.na(y)) && (x1>=1) && (x2<=R) && (y1>=1) && (y2<=R) ) {as.vector(im[x1:x2,y1:y2])}
else {NULL}
}
meanPatch <- matrix(data=colMeans(patches),nrow=P)
image(1:P,1:P,meanPatch[P:1,P:1],col=gray((0:255)/255),main=coord) #show the mean patch for that keypoint
#Defining the search coordinates in the evaluation images, optmize on the search step size, per keypoint
for (s in 1:S)
{
search_size <- s #search step size
mean_x <- round(mean(trainSet[c(trainSet2IndTrain),coord_x],na.rm=T),digits=3)
mean_y <- round(mean(trainSet[c(trainSet2IndTrain),coord_y],na.rm=T),digits=3)
x1 <- as.integer(mean_x)-search_size
x2 <- as.integer(mean_x)+search_size
y1 <- as.integer(mean_y)-search_size
y2 <- as.integer(mean_y)+search_size
params <- expand.grid(x=x1:x2,y=y1:y2)
#Evaluating by finding best coordinate to each face in eval set, place the patch on it and calculate RMSE with original data
err <- vector(mode="numeric",length=length(trainSet2IndEval))
for (k in 1:length(trainSet2IndEval))
{
im <- matrix(trainFaces[trainSet2IndEval[k],],nrow=R)
eval <- foreach(j=1:nrow(params), .combine=rbind) %dopar% {
x <- params$x[j]; y <- params$y[j] #coordinate
if (((x-patch_size)>=1) && ((x+patch_size)<=R) && ((y-patch_size)>=1) && ((y+patch_size)<=R))
{ p <- im[(x-patch_size):(x+patch_size),(y-patch_size):(y+patch_size)]
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3) }
else {score <- NA}
score <- ifelse(is.na(score),0,score)
data.frame(x,y,score)
}
bestCoor <- eval[which.max(eval$score),c("x","y")] #best coordinates with max score
err[k] <- round(sqrt(mean(c(((trainSet[trainSet2IndEval[k],coord_x]-bestCoor$x)^2),((trainSet[trainSet2IndEval[k],coord_y]-bestCoor$y)^2)),na.rm=T)),digits=3) #RMSE
}
ErrMtx[q,s] <- mean(err,na.rm=T) #fill error matrix for optimization
}
}
bestErr <- arrayInd(which.min(ErrMtx),dim(ErrMtx)) #best (min) error coordinates - to be used for that facial keypoint at the real test
Keypoints_Optimization_Table2$keypoint[m] <- coord
Keypoints_Optimization_Table2$patch_size[m] <- Q[bestErr[1]]
Keypoints_Optimization_Table2$search_size[m] <- bestErr[2]
Keypoints_Optimization_Table2$error[m] <- ErrMtx[bestErr]
rm(eval); rm(patches); rm(params)
}
gc()
k
trainSet2IndEval[k]
trainFaces[trainSet2IndEval[k],]
trainFaces[6835,]
trainFaces[6834,]
trainFaces[6830,]
View(trainFaces)
gc()
length(trainSet2IndEval)
trainSet$mouth_center_bottom_lip_y[6835]
trainFaces[6835]
trainFaces[6834]
trainFaces[6830]
trainFaces[6820]
trainFaces[6835,]
trainFaces[6820,]
trainFaces[6830,]
trainFaces[6880,]
trainFaces[7049,]
trainFaces[6832,]
dim(trainFaces)
i
trainSet2IndTrain[i]
trainSet2IndTrain
testSet2Ind <- which(table(result$ImageId)=<10) #Indices of images with >19 NA's of keypoints in TestSet
testSet2Ind <- which(table(result$ImageId)<=10) #Indices of images with >19 NA's of keypoints in TestSet
trainSet2IndTrain <- unlist(createDataPartition(trainSet2Ind,p=0.8),use.names = F)
trainSet2IndEval <- trainSet2Ind[-trainSet2IndTrain]
View(trainSet2Ind)
View(trainSet2IndTrain)
View(trainSet2IndEval)
trainSet1IndTrain <- trainSet1Ind[unlist(createDataPartition(trainSet1Ind,p=0.8),use.names = F)]
trainSet2IndTrain <- trainSet2Ind[unlist(createDataPartition(trainSet2Ind,p=0.8),use.names = F)]
trainSet1IndEval <- trainSet1Ind[-trainSet1IndTrain]
trainSet2IndEval <- trainSet2Ind[-trainSet2IndTrain]
trainSet1par <- unlist(createDataPartition(trainSet1Ind,p=0.8),use.names = F)
trainSet2par <- unlist(createDataPartition(trainSet2Ind,p=0.8),use.names = F)
trainSet1IndTrain <- trainSet1Ind[trainSet1par]
trainSet2IndTrain <- trainSet2Ind[trainSet2par]
trainSet1IndEval <- trainSet1Ind[-trainSet1par]
trainSet2IndEval <- trainSet2Ind[-trainSet2par]
Keypoints_Optimization_Table2 <- data.frame(keypoint=rep(NA,M/2),patch_size=rep(NA,M/2),search_size=rep(NA,M/2),error=rep(NA,M/2)) #optimization table of pathces and searches per key
Q <- c(5,10,15) #Number of pixels around the keypoint for optimization
S <- 4 #number of search size patches to optimize on (1:S)
for (m in 1:(M/2))
{
#Bulding the mean patch for each keypoint
coord <- keypoints[m] #keypoint to focus on
ErrMtx <- matrix(0,nrow=length(Q),ncol=S)
for (q in 1:length(Q))
{
patch_size <- Q[q]
P <- 2*patch_size+1 #Patch length
coord_x <- paste(coord,"x",sep="_")
coord_y <- paste(coord,"y",sep="_")
patches <- foreach (i=1:length(trainSet2IndTrain), .combine=rbind) %dopar% {
im <- matrix(trainFaces[trainSet2IndTrain[i],],nrow=R)
x <- trainSet[trainSet2IndTrain[i],coord_x]
y <- trainSet[trainSet2IndTrain[i],coord_y]
x1 <- (x-patch_size); x2 <- (x+patch_size)
y1 <- (y-patch_size); y2 <- (y+patch_size)
if ( (!is.na(x)) && (!is.na(y)) && (x1>=1) && (x2<=R) && (y1>=1) && (y2<=R) ) {as.vector(im[x1:x2,y1:y2])}
else {NULL}
}
meanPatch <- matrix(data=colMeans(patches),nrow=P)
image(1:P,1:P,meanPatch[P:1,P:1],col=gray((0:255)/255),main=coord) #show the mean patch for that keypoint
#Defining the search coordinates in the evaluation images, optmize on the search step size, per keypoint
for (s in 1:S)
{
search_size <- s #search step size
mean_x <- round(mean(trainSet[c(trainSet2IndTrain),coord_x],na.rm=T),digits=3)
mean_y <- round(mean(trainSet[c(trainSet2IndTrain),coord_y],na.rm=T),digits=3)
x1 <- as.integer(mean_x)-search_size
x2 <- as.integer(mean_x)+search_size
y1 <- as.integer(mean_y)-search_size
y2 <- as.integer(mean_y)+search_size
params <- expand.grid(x=x1:x2,y=y1:y2)
#Evaluating by finding best coordinate to each face in eval set, place the patch on it and calculate RMSE with original data
err <- vector(mode="numeric",length=length(trainSet2IndEval))
for (k in 1:length(trainSet2IndEval))
{
im <- matrix(trainFaces[trainSet2IndEval[k],],nrow=R)
eval <- foreach(j=1:nrow(params), .combine=rbind) %dopar% {
x <- params$x[j]; y <- params$y[j] #coordinate
if (((x-patch_size)>=1) && ((x+patch_size)<=R) && ((y-patch_size)>=1) && ((y+patch_size)<=R))
{ p <- im[(x-patch_size):(x+patch_size),(y-patch_size):(y+patch_size)]
score <- round(cor(as.vector(p),as.vector(meanPatch)),digits=3) }
else {score <- NA}
score <- ifelse(is.na(score),0,score)
data.frame(x,y,score)
}
bestCoor <- eval[which.max(eval$score),c("x","y")] #best coordinates with max score
err[k] <- round(sqrt(mean(c(((trainSet[trainSet2IndEval[k],coord_x]-bestCoor$x)^2),((trainSet[trainSet2IndEval[k],coord_y]-bestCoor$y)^2)),na.rm=T)),digits=3) #RMSE
}
ErrMtx[q,s] <- mean(err,na.rm=T) #fill error matrix for optimization
}
}
bestErr <- arrayInd(which.min(ErrMtx),dim(ErrMtx)) #best (min) error coordinates - to be used for that facial keypoint at the real test
Keypoints_Optimization_Table2$keypoint[m] <- coord
Keypoints_Optimization_Table2$patch_size[m] <- Q[bestErr[1]]
Keypoints_Optimization_Table2$search_size[m] <- bestErr[2]
Keypoints_Optimization_Table2$error[m] <- ErrMtx[bestErr]
rm(eval); rm(patches); rm(params)
}
im <- matrix(trainFaces[trainSet2IndTrain[i],],nrow=R)
image(1:P,1:P,meanPatch[P:1,P:1],col=gray((0:255)/255),main=coord) #show the mean patch for that keypoint
search_size <- s #search step size
mean_x <- round(mean(trainSet[c(trainSet2IndTrain),coord_x],na.rm=T),digits=3)
mean_y <- round(mean(trainSet[c(trainSet2IndTrain),coord_y],na.rm=T),digits=3)
x1 <- as.integer(mean_x)-search_size
x2 <- as.integer(mean_x)+search_size
y1 <- as.integer(mean_y)-search_size
y2 <- as.integer(mean_y)+search_size
params <- expand.grid(x=x1:x2,y=y1:y2)
k
trainSet2IndEval[k]
trainFaces[trainSet2IndEval[k],]
trainSet <- read.csv("training.csv")
#trainSet <- read.csv.ffdf(file="train.csv", header=TRUE, VERBOSE=TRUE) #virtual data frame
#seperate the image from data
trainFaces <- foreach(im = as.character(trainSet$Image), .combine=rbind) %dopar% {as.integer(unlist(strsplit(im, " ")))}
trainSet$Image <- {}
rm(list=ls())
gc()
