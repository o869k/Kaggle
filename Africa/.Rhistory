RFmodelpredictions <- predict(RFmodel$finalModel,newdata=evalSetPCA)
ErrMtxTop[1,1] <- ErrMtxTop[1,1]+round(sqrt(mean((RFmodelpredictions-target_data_top[-trainSetTopIndTrain[[j]],soil])^2)),digits=3)
print("top,raw,no trans"); gc()
library(doParallel); registerDoParallel() #for parallalizaton of chenging images from vectors to matrixes
RFmodel <- train(target_data_top[trainSetTopIndTrain[[j]],soil] ~  . ,data=trainSetPCA,method="rf")
RFmodel <- train(target_data_top[trainSetTopIndTrain[[j]],soil] ~  . ,data=trainSetPCA,method="ada")
RFmodelpredictions <- predict(RFmodel$finalModel,newdata=evalSetPCA)
ErrMtxTop[1,1] <- ErrMtxTop[1,1]+round(sqrt(mean((RFmodelpredictions-target_data_top[-trainSetTopIndTrain[[j]],soil])^2)),digits=3)
print("top,raw,no trans"); gc()
RFmodel <- train(target_data_top[trainSetTopIndTrain[[j]],soil] ~  . ,data=trainSetPCA,method="ada")
RFmodelpredictions <- predict(RFmodel$finalModel,newdata=evalSetPCA)
ErrMtxTop[1,1] <- ErrMtxTop[1,1]+round(sqrt(mean((RFmodelpredictions-target_data_top[-trainSetTopIndTrain[[j]],soil])^2)),digits=3)
print("top,raw,no trans"); gc()
RFmodel <- train(target_data_top[trainSetTopIndTrain[[j]],soil] ~  . ,data=trainSetPCA,method="glm")
RFmodelpredictions <- predict(RFmodel$finalModel,newdata=evalSetPCA)
ErrMtxTop[1,1] <- ErrMtxTop[1,1]+round(sqrt(mean((RFmodelpredictions-target_data_top[-trainSetTopIndTrain[[j]],soil])^2)),digits=3)
print("top,raw,no trans"); gc()
library(doParallel); registerDoParallel() #for parallalizaton of chenging images from vectors to matrixes
RFmodel <- train(target_data_top[trainSetTopIndTrain[[j]],soil] ~  . ,data=trainSetPCA,method="glm")
RFmodelpredictions <- predict(RFmodel$finalModel,newdata=evalSetPCA)
ErrMtxTop[1,1] <- ErrMtxTop[1,1]+round(sqrt(mean((RFmodelpredictions-target_data_top[-trainSetTopIndTrain[[j]],soil])^2)),digits=3)
print("top,raw,no trans"); gc()
ErrMtxTop[1,1]
RFmodel <- train(target_data_top[trainSetTopIndTrain[[j]],soil] ~  . ,data=trainSetPCA,method="pls")
RFmodelpredictions <- predict(RFmodel$finalModel,newdata=evalSetPCA)
ErrMtxTop[1,1] <- ErrMtxTop[1,1]+round(sqrt(mean((RFmodelpredictions-target_data_top[-trainSetTopIndTrain[[j]],soil])^2)),digits=3)
print("top,raw,no trans"); gc()
ErrMtxTop[1,1]
RFmodel <- train(target_data_top[trainSetTopIndTrain[[j]],soil] ~  . ,data=trainSetPCA,method="pcaNNet")
RFmodelpredictions <- predict(RFmodel$finalModel,newdata=evalSetPCA)
ErrMtxTop[1,1] <- ErrMtxTop[1,1]+round(sqrt(mean((RFmodelpredictions-target_data_top[-trainSetTopIndTrain[[j]],soil])^2)),digits=3)
print("top,raw,no trans"); gc()
ErrMtxTop[1,1]
?rf
RFmodel <- train(target_data_top[trainSetTopIndTrain[[j]],soil] ~  . ,data=trainSetPCA,method="svmLinear")
RFmodelpredictions <- predict(RFmodel$finalModel,newdata=evalSetPCA)
ErrMtxTop[1,1] <- ErrMtxTop[1,1]+round(sqrt(mean((RFmodelpredictions-target_data_top[-trainSetTopIndTrain[[j]],soil])^2)),digits=3)
print("top,raw,no trans"); gc()
ErrMtxTop[1,1]
RFmodel <- train(target_data_top[trainSetTopIndTrain[[j]],soil] ~  . ,data=trainSetPCA,method="rf")
RFmodelpredictions <- predict(RFmodel$finalModel,newdata=evalSetPCA)
ErrMtxTop[1,1] <- ErrMtxTop[1,1]+round(sqrt(mean((RFmodelpredictions-target_data_top[-trainSetTopIndTrain[[j]],soil])^2)),digits=3)
print("top,raw,no trans"); gc()
ErrMtxTop[1,1]
RFmodel <- train(target_data_top[trainSetTopIndTrain[[j]],soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1)
{
spatial_test_data <- testSet[,c(1,Mspectral:(Mspectral+Mspatial))]
spatial_test_data_top <- spatial_test_data[which(testSet$Depth=="Topsoil"),]
spatial_test_data_sub <- spatial_test_data[which(testSet$Depth=="Subsoil"),]
spectral_test_data <- testSet[,1:(Mspectral-1)]
spectral_test_data_top <- spectral_test_data[which(testSet$Depth=="Topsoil"),]
spectral_test_data_sub <- spectral_test_data[which(testSet$Depth=="Subsoil"),]
Ntest_top <- nrow(spatial_test_data_top) #Number of top soil rows of test set
Ntest_sub <- nrow(spatial_test_data_sub) #Number of subsoil rows of test set
}
#Testing according to Optimization matrix - transformation & deriv
{
#For top soil
{
soil <- "Ca"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsCa_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "P"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsP_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "pH"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionspH_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "SOC"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSOC_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "Sand"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSand_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
}
#For sub soil
{
soil <- "Ca"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsCa_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "P"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsP_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "pH"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionspH_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "SOC"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSOC_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "Sand"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSand_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
}
}
#Binding the predictions for top & sub soils for each target
{
predictionsCa <- vector(mode="numeric",length = Nt)
predictionsCa[which(testSet$Depth=="Topsoil")] <- predictionsCa_top
predictionsCa[which(testSet$Depth=="Subsoil")] <- predictionsCa_sub
predictionsP <- vector(mode="numeric",length = Nt)
predictionsP[which(testSet$Depth=="Topsoil")] <- predictionsP_top
predictionsP[which(testSet$Depth=="Subsoil")] <- predictionsP_sub
predictionspH <- vector(mode="numeric",length = Nt)
predictionspH[which(testSet$Depth=="Topsoil")] <- predictionspH_top
predictionspH[which(testSet$Depth=="Subsoil")] <- predictionspH_sub
predictionsSOC <- vector(mode="numeric",length = Nt)
predictionsSOC[which(testSet$Depth=="Topsoil")] <- predictionsSOC_top
predictionsSOC[which(testSet$Depth=="Subsoil")] <- predictionsSOC_sub
predictionsSand <- vector(mode="numeric",length = Nt)
predictionsSand[which(testSet$Depth=="Topsoil")] <- predictionsSand_top
predictionsSand[which(testSet$Depth=="Subsoil")] <- predictionsSand_sub
}
#Writing the result
{
result <- data.frame(PIDN = testSet$PIDN,Ca=predictionsCa,P=predictionsP,pH=predictionspH,SOC=predictionsSOC,Sand=predictionsSand)
write.csv(result,file="result_ori_kro.csv",row.names=FALSE)
}
library(doParallel); registerDoParallel() #for parallalizaton of chenging images from vectors to matrixes
gc()
gc
gc()
#Testing according to Optimization matrix - transformation & deriv
{
#For top soil
{
soil <- "Ca"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsCa_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "P"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsP_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "pH"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionspH_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "SOC"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSOC_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "Sand"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSand_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
}
#For sub soil
{
soil <- "Ca"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsCa_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "P"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsP_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "pH"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionspH_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "SOC"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSOC_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
soil <- "Sand"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSand_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
}
}
#Binding the predictions for top & sub soils for each target
{
predictionsCa <- vector(mode="numeric",length = Nt)
predictionsCa[which(testSet$Depth=="Topsoil")] <- predictionsCa_top
predictionsCa[which(testSet$Depth=="Subsoil")] <- predictionsCa_sub
predictionsP <- vector(mode="numeric",length = Nt)
predictionsP[which(testSet$Depth=="Topsoil")] <- predictionsP_top
predictionsP[which(testSet$Depth=="Subsoil")] <- predictionsP_sub
predictionspH <- vector(mode="numeric",length = Nt)
predictionspH[which(testSet$Depth=="Topsoil")] <- predictionspH_top
predictionspH[which(testSet$Depth=="Subsoil")] <- predictionspH_sub
predictionsSOC <- vector(mode="numeric",length = Nt)
predictionsSOC[which(testSet$Depth=="Topsoil")] <- predictionsSOC_top
predictionsSOC[which(testSet$Depth=="Subsoil")] <- predictionsSOC_sub
predictionsSand <- vector(mode="numeric",length = Nt)
predictionsSand[which(testSet$Depth=="Topsoil")] <- predictionsSand_top
predictionsSand[which(testSet$Depth=="Subsoil")] <- predictionsSand_sub
}
#Writing the result
{
result <- data.frame(PIDN = testSet$PIDN,Ca=predictionsCa,P=predictionsP,pH=predictionspH,SOC=predictionsSOC,Sand=predictionsSand)
write.csv(result,file="result_ori_kro.csv",row.names=FALSE)
}
predictionsCa_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
predictionsCa_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
soil <- "Ca"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsCa_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
str(trainSetPCA)
summary(trainSetPCA)
colnames(trainSetPCA)
colnames(testSetPCA)
{
spatial_test_data <- testSet[,c(1,Mspectral:(Mspectral+Mspatial))]
spatial_test_data_top <- spatial_test_data[which(testSet$Depth=="Topsoil"),]
spatial_test_data_sub <- spatial_test_data[which(testSet$Depth=="Subsoil"),]
spectral_test_data <- testSet[,1:Mspectral]
spectral_test_data_top <- spectral_test_data[which(testSet$Depth=="Topsoil"),]
spectral_test_data_sub <- spectral_test_data[which(testSet$Depth=="Subsoil"),]
Ntest_top <- nrow(spatial_test_data_top) #Number of top soil rows of test set
Ntest_sub <- nrow(spatial_test_data_sub) #Number of subsoil rows of test set
}
colnames(testSetPCA)
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
colnames(testSetPCA)
colnames(trainSetPCA)
colnames(testSet[,c(1,Mspectral:(Mspectral+Mspatial))])
spatial_test_data <- testSet[,c(1,Mspectral:(Mspectral+Mspatial))]
spatial_test_data_top <- spatial_test_data[which(testSet$Depth=="Topsoil"),]
spatial_test_data_sub <- spatial_test_data[which(testSet$Depth=="Subsoil"),]
colnames(spatial_data_top[,2:Mspatial])
spatial_test_data <- testSet[,c(1,(Mspectral+1):(Mspectral+Mspatial))]
spatial_test_data_top <- spatial_test_data[which(testSet$Depth=="Topsoil"),]
spatial_test_data_sub <- spatial_test_data[which(testSet$Depth=="Subsoil"),]
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
colnames(testSetPCA)
predictionsCa_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print("top ",soil); gc()
{
spatial_test_data <- testSet[,c(1,(Mspectral+1):(Mspectral+Mspatial))]
spatial_test_data_top <- spatial_test_data[which(testSet$Depth=="Topsoil"),]
spatial_test_data_sub <- spatial_test_data[which(testSet$Depth=="Subsoil"),]
spectral_test_data <- testSet[,1:Mspectral]
spectral_test_data_top <- spectral_test_data[which(testSet$Depth=="Topsoil"),]
spectral_test_data_sub <- spectral_test_data[which(testSet$Depth=="Subsoil"),]
Ntest_top <- nrow(spatial_test_data_top) #Number of top soil rows of test set
Ntest_sub <- nrow(spatial_test_data_sub) #Number of subsoil rows of test set
}
print(c("top ",soil)); gc()
soil <- "P"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsP_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("top ",soil)); gc()
soil <- "pH"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionspH_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("top ",soil)); gc()
soil <- "SOC"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSOC_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("top ",soil)); gc()
soil <- "Sand"
trainSetPCA <- cbind(spectral_data_top[,sampling],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top[,sampling],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSand_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("top ",soil)); gc()
#For sub soil
{
soil <- "Ca"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsCa_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("sub ",soil)); gc()
soil <- "P"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsP_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("sub ",soil)); gc()
soil <- "pH"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionspH_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("sub ",soil)); gc()
soil <- "SOC"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSOC_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("sub ",soil)); gc()
soil <- "Sand"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=250)
predictionsSand_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("sub ",soil)); gc()
}
#Binding the predictions for top & sub soils for each target
{
predictionsCa <- vector(mode="numeric",length = Nt)
predictionsCa[which(testSet$Depth=="Topsoil")] <- predictionsCa_top
predictionsCa[which(testSet$Depth=="Subsoil")] <- predictionsCa_sub
predictionsP <- vector(mode="numeric",length = Nt)
predictionsP[which(testSet$Depth=="Topsoil")] <- predictionsP_top
predictionsP[which(testSet$Depth=="Subsoil")] <- predictionsP_sub
predictionspH <- vector(mode="numeric",length = Nt)
predictionspH[which(testSet$Depth=="Topsoil")] <- predictionspH_top
predictionspH[which(testSet$Depth=="Subsoil")] <- predictionspH_sub
predictionsSOC <- vector(mode="numeric",length = Nt)
predictionsSOC[which(testSet$Depth=="Topsoil")] <- predictionsSOC_top
predictionsSOC[which(testSet$Depth=="Subsoil")] <- predictionsSOC_sub
predictionsSand <- vector(mode="numeric",length = Nt)
predictionsSand[which(testSet$Depth=="Topsoil")] <- predictionsSand_top
predictionsSand[which(testSet$Depth=="Subsoil")] <- predictionsSand_sub
}
#Writing the result
{
result <- data.frame(PIDN = testSet$PIDN,Ca=predictionsCa,P=predictionsP,pH=predictionspH,SOC=predictionsSOC,Sand=predictionsSand)
write.csv(result,file="result_ori_kro.csv",row.names=FALSE)
}
head(result)
gc()
library(doParallel); registerDoParallel() #for parallalizaton of chenging images from vectors to matrixes
spectral_test_data_sub_deriv1 <- as.data.frame(t(diff(t(spectral_test_data_sub[,2:Mspectral]), differences = 1)))
spectral_test_data_sub_deriv2 <- as.data.frame(t(diff(t(spectral_test_data_sub[,2:Mspectral]), differences = 2)))
spectral_test_data_top_deriv1 <- as.data.frame(t(diff(t(spectral_test_data_top[,2:Mspectral]), differences = 1)))
spectral_test_data_top_deriv2 <- as.data.frame(t(diff(t(spectral_test_data_top[,2:Mspectral]), differences = 2)))
#Testing according to Optimization matrix - transformation & deriv
{
#For top soil
{
soil <- "Ca"
trainSetPCA <- cbind(spectral_data_top_deriv1[,sampling_deriv1],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top_deriv1[,sampling_deriv1],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1000)
predictionsCa_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("top ",soil)); gc()
soil <- "P"
trainSetPCA <- cbind(spectral_data_top_deriv1[,sampling_deriv1],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top_deriv1[,sampling_deriv1],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1000)
predictionsP_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("top ",soil)); gc()
soil <- "pH"
trainSetPCA <- cbind(spectral_data_top_deriv1[,sampling_deriv1],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top_deriv1[,sampling_deriv1],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1000)
predictionspH_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("top ",soil)); gc()
soil <- "SOC"
trainSetPCA <- cbind(spectral_data_top_deriv1[,sampling_deriv1],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top_deriv1[,sampling_deriv1],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1000)
predictionsSOC_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("top ",soil)); gc()
soil <- "Sand"
trainSetPCA <- cbind(spectral_data_top_deriv1[,sampling_deriv1],spatial_data_top[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_top_deriv1[,sampling_deriv1],spatial_test_data_top[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_top[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1000)
predictionsSand_top <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("top ",soil)); gc()
}
#For sub soil
{
soil <- "Ca"
trainSetPCA <- cbind(spectral_data_sub_deriv1[,sampling_deriv1],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub_deriv1[,sampling_deriv1],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1000)
predictionsCa_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("sub ",soil)); gc()
soil <- "P"
trainSetPCA <- cbind(spectral_data_sub[,sampling],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub[,sampling],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1000)
predictionsP_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("sub ",soil)); gc()
soil <- "pH"
trainSetPCA <- cbind(spectral_data_sub_deriv1[,sampling_deriv1],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub_deriv1[,sampling_deriv1],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1000)
predictionspH_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("sub ",soil)); gc()
soil <- "SOC"
trainSetPCA <- cbind(spectral_data_sub_deriv1[,sampling_deriv1],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub_deriv1[,sampling_deriv1],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1000)
predictionsSOC_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("sub ",soil)); gc()
soil <- "Sand"
trainSetPCA <- cbind(spectral_data_sub_deriv1[,sampling_deriv1],spatial_data_sub[,2:Mspatial])
testSetPCA <- cbind(spectral_test_data_sub_deriv1[,sampling_deriv1],spatial_test_data_sub[,2:Mspatial])
print("pca"); gc()
RFmodel <- train(target_data_sub[,soil] ~  . ,data=trainSetPCA,method="rf",ntrees=1000)
predictionsSand_sub <- predict(RFmodel$finalModel,newdata=testSetPCA)
print(c("sub ",soil)); gc()
}
}
#Binding the predictions for top & sub soils for each target
{
predictionsCa <- vector(mode="numeric",length = Nt)
predictionsCa[which(testSet$Depth=="Topsoil")] <- predictionsCa_top
predictionsCa[which(testSet$Depth=="Subsoil")] <- predictionsCa_sub
predictionsP <- vector(mode="numeric",length = Nt)
predictionsP[which(testSet$Depth=="Topsoil")] <- predictionsP_top
predictionsP[which(testSet$Depth=="Subsoil")] <- predictionsP_sub
predictionspH <- vector(mode="numeric",length = Nt)
predictionspH[which(testSet$Depth=="Topsoil")] <- predictionspH_top
predictionspH[which(testSet$Depth=="Subsoil")] <- predictionspH_sub
predictionsSOC <- vector(mode="numeric",length = Nt)
predictionsSOC[which(testSet$Depth=="Topsoil")] <- predictionsSOC_top
predictionsSOC[which(testSet$Depth=="Subsoil")] <- predictionsSOC_sub
predictionsSand <- vector(mode="numeric",length = Nt)
predictionsSand[which(testSet$Depth=="Topsoil")] <- predictionsSand_top
predictionsSand[which(testSet$Depth=="Subsoil")] <- predictionsSand_sub
}
#Writing the result
{
result <- data.frame(PIDN = testSet$PIDN,Ca=predictionsCa,P=predictionsP,pH=predictionspH,SOC=predictionsSOC,Sand=predictionsSand)
write.csv(result,file="result_ori_kro.csv",row.names=FALSE)
}
